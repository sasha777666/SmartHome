
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Шаг1ПолучитьКлючАПИИзСправочника();
	
КонецПроцедуры

//Страницы++
&НаСервере
Процедура Шаг1ПолучитьКлючАПИИзСправочника()
	
	Если ЗначениеЗаполнено(ТелеграмМодуль.ПолучитьКлючAPIТелеграмБота()) Тогда 
		МастерКлючАПИ = ТелеграмМодуль.ПолучитьКлючAPIТелеграмБота();		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда 
		Шаг1ПолучитьКлючАПИИзСправочника();
	//ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда 
		
	КонецЕсли;
		
КонецПроцедуры

//Страницы--


//Шаг1++
&НаСервере
Процедура Шаг1ЗаписатьКлючАПИНаСервере()
	
	ОсновныеНастройки = Справочники.Настройки.ТелеграмОсновныеНастройки.ПолучитьОбъект();
	
	СтрАдресБота = ОсновныеНастройки.ТаблицаНастроек.Найти("АдресБота", "Параметр");
	Если СтрАдресБота = Неопределено Тогда 
		СтрАдресБота = ОсновныеНастройки.ТаблицаНастроек.Добавить();
		СтрАдресБота.Параметр = "АдресБота"; 
		СтрАдресБота.Комментарий = "Адрес бота (@MyBot)";
	КонецЕсли;
	СтрАдресБота.Значение = МастерИмяБота;
	
	СтрКлючAPI = ОсновныеНастройки.ТаблицаНастроек.Найти("КлючAPI", "Параметр");
	Если СтрКлючAPI = Неопределено Тогда 
		СтрКлючAPI = ОсновныеНастройки.ТаблицаНастроек.Добавить();
		СтрКлючAPI.Параметр = "КлючAPI"; 
		//СтрКлючAPI.Комментарий = "";
	КонецЕсли;
	СтрКлючAPI.Значение = МастерКлючАПИ;

	ОсновныеНастройки.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Шаг1ЗаписатьКлючАПИ(Команда)
	Шаг1ЗаписатьКлючАПИНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьПроцессыПоУмолчаниюНаСервере()
	//Создадим 4 Процесса
	
	Телеграм_ПолучитьНовыеСообщения = РегистрыСведений.Процессы.СоздатьМенеджерЗаписи();
	Телеграм_ПолучитьНовыеСообщения.Наименование = "Телеграм_ПолучитьНовыеСообщения";
	Телеграм_ПолучитьНовыеСообщения.РасположениеПроцедуры = "ТелеграмМодуль";
	Телеграм_ПолучитьНовыеСообщения.НазваниеПроцедуры = "ПолучитьНовыеСообщения";
	Телеграм_ПолучитьНовыеСообщения.Оборудование = Справочники.Оборудование.ТелеграмБот;
	Телеграм_ПолучитьНовыеСообщения.Включён = Истина;
	Телеграм_ПолучитьНовыеСообщения.МинИнтервалПослеСтарта = 0;
	Телеграм_ПолучитьНовыеСообщения.МинИнтервалПослеЗавершения = 1;
	Телеграм_ПолучитьНовыеСообщения.КлючФоновогоЗадания = РегистрыСведений.Процессы.НовыйКлючФоновогоЗадания();
	Телеграм_ПолучитьНовыеСообщения.Комментарий = "Процесс получает новые сообщение телеграм бота";
	Телеграм_ПолучитьНовыеСообщения.МаксимальноеВремяИтерации = 30;
	Телеграм_ПолучитьНовыеСообщения.Записать(Истина);
		
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений = РегистрыСведений.Процессы.СоздатьМенеджерЗаписи();
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.Наименование = "Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений";
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.РасположениеПроцедуры = "ТелеграмМодуль";
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.НазваниеПроцедуры = "ПовторноПроверитьЗагрузитьВложенияИОбработатьНеОбработанныеВходящиеСообщений";
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.Оборудование = Справочники.Оборудование.ТелеграмБот;
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.Включён = Истина;
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.МинИнтервалПослеСтарта = 0;
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.МинИнтервалПослеЗавершения = 60;
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.КлючФоновогоЗадания = РегистрыСведений.Процессы.НовыйКлючФоновогоЗадания();
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.Комментарий = "Процесс проверят загружает вложения и обрабатывает входящие сообщения которые не получилось обработать при получении";
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.МаксимальноеВремяИтерации = 0;
	Телеграм_ПовторнаяПроверкаЗагрузкаВложенийИОбработкаСообщений.Записать(Истина);
	
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений = РегистрыСведений.Процессы.СоздатьМенеджерЗаписи();
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.Наименование = "Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений";
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.РасположениеПроцедуры = "ТелеграмМодуль";
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.НазваниеПроцедуры = "ПовторноОбработатьПроверенныеЗагруженныеНеОбработанныеСообщения";
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.Оборудование = Справочники.Оборудование.ТелеграмБот;
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.Включён = Истина;
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.МинИнтервалПослеСтарта = 0;
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.МинИнтервалПослеЗавершения = 60;
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.КлючФоновогоЗадания = РегистрыСведений.Процессы.НовыйКлючФоновогоЗадания();
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.Комментарий = "Процесс обрабатывает входящие проверенные/загруженные сообщения которые не получилось обработать при получении";
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.МаксимальноеВремяИтерации = 0;
	Телеграм_ПовторнаяОбработкаПроверенныхЗагруженныхНеОбработанныхСообщений.Записать(Истина);

	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения = РегистрыСведений.Процессы.СоздатьМенеджерЗаписи();
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.Наименование = "Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения";
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.РасположениеПроцедуры = "ТелеграмМодуль";
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.НазваниеПроцедуры = "ПовторноОтправитьНеОтправленныеИсходящиеСообщения";
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.Оборудование = Справочники.Оборудование.ТелеграмБот;
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.Включён = Истина;
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.МинИнтервалПослеСтарта = 0;
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.МинИнтервалПослеЗавершения = 60;
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.КлючФоновогоЗадания = РегистрыСведений.Процессы.НовыйКлючФоновогоЗадания();
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.Комментарий = "Процесс повторно пытается отравить исходящие сообщения которые не удалось отправить";
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.МаксимальноеВремяИтерации = 0;
	Телеграм_ПовторнаяОтправкаНеОтправленныеИсходящиеСообщения.Записать(Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцессыПоУмолчанию(Команда)
	СоздатьПроцессыПоУмолчаниюНаСервере();
КонецПроцедуры

&НаСервере
Процедура Шаг2СохранитьНаСервере()
	
	ОсновныеНастройки = Справочники.Настройки.ТелеграмОсновныеНастройки.ПолучитьОбъект();
	
	СтрПроксиИспользовать = ОсновныеНастройки.ТаблицаНастроек.Найти("ПроксиИспользовать", "Параметр");
	Если СтрПроксиИспользовать = Неопределено Тогда 
		СтрПроксиИспользовать = ОсновныеНастройки.ТаблицаНастроек.Добавить();
		СтрПроксиИспользовать.Параметр = "ПроксиИспользовать"; 
		СтрПроксиИспользовать.Комментарий = "Использовать для подключения к api.telegram.org прокси сервер";
	КонецЕсли;
	СтрПроксиИспользовать.Значение = МастерПроксиИспользовать;
	
	СтрШаблонДеактивироватьТекущийИИ = ОсновныеНастройки.ТаблицаНастроек.Найти("ШаблонДеактивироватьТекущийИИ", "Параметр");
	Если СтрШаблонДеактивироватьТекущийИИ = Неопределено Тогда 
		СтрШаблонДеактивироватьТекущийИИ = ОсновныеНастройки.ТаблицаНастроек.Добавить();
		СтрШаблонДеактивироватьТекущийИИ.Параметр = "ШаблонДеактивироватьТекущийИИ"; 
		СтрШаблонДеактивироватьТекущийИИ.Комментарий = "Шаблон деактивировать текущий ИИ";
	КонецЕсли;
	СтрШаблонДеактивироватьТекущийИИ.Значение = МастерШаблонДеактивироватьТекущийИИ;

	СтрШаблонСоздатьИОткрытьГруппуСообщений = ОсновныеНастройки.ТаблицаНастроек.Найти("ШаблонСоздатьИОткрытьГруппуСообщений", "Параметр");
	Если СтрШаблонСоздатьИОткрытьГруппуСообщений = Неопределено Тогда 
		СтрШаблонСоздатьИОткрытьГруппуСообщений = ОсновныеНастройки.ТаблицаНастроек.Добавить();
		СтрШаблонСоздатьИОткрытьГруппуСообщений.Параметр = "ШаблонСоздатьИОткрытьГруппуСообщений"; 
		СтрШаблонСоздатьИОткрытьГруппуСообщений.Комментарий = "Шаблон создать и открыть группу сообщений";
	КонецЕсли;
	СтрШаблонСоздатьИОткрытьГруппуСообщений.Значение = МастерШаблонСоздатьИОткрытьГруппуСообщений;

	СтрШаблонЗакрытьТекущуюГруппуСообщений = ОсновныеНастройки.ТаблицаНастроек.Найти("ШаблонЗакрытьТекущуюГруппуСообщений", "Параметр");
	Если СтрШаблонЗакрытьТекущуюГруппуСообщений = Неопределено Тогда 
		СтрШаблонЗакрытьТекущуюГруппуСообщений = ОсновныеНастройки.ТаблицаНастроек.Добавить();
		СтрШаблонЗакрытьТекущуюГруппуСообщений.Параметр = "ШаблонЗакрытьТекущуюГруппуСообщений"; 
		СтрШаблонЗакрытьТекущуюГруппуСообщений.Комментарий = "Шаблон закрыть текущую группу сообщений";
	КонецЕсли;
	СтрШаблонЗакрытьТекущуюГруппуСообщений.Значение = МастерШаблонЗакрытьТекущуюГруппуСообщений;

	СтрПроксиИспользовать = ОсновныеНастройки.ТаблицаНастроек.Найти("НовымКонтактамДоступнаОбработкаСообщений", "Параметр");
	Если СтрПроксиИспользовать = Неопределено Тогда 
		СтрПроксиИспользовать = ОсновныеНастройки.ТаблицаНастроек.Добавить();
		СтрПроксиИспользовать.Параметр = "НовымКонтактамДоступнаОбработкаСообщений"; 
		СтрПроксиИспользовать.Комментарий = "Устанавливать доступность обработки сообщений для новых контактов";
	КонецЕсли;
	СтрПроксиИспользовать.Значение = МастерНовымКонтактамДоступнаОбработкаСообщений;

	ОсновныеНастройки.Записать();

КонецПроцедуры

&НаКлиенте
Процедура Шаг2Сохранить(Команда)
	Шаг2СохранитьНаСервере();
КонецПроцедуры


//Шаг1--
