
Функция NativeПодключитьКомпоненту() Экспорт
	
	Попытка
		ДрайверЕстьВоВременныхФайлах = (НайтиФайлы(КаталогВременныхФайлов(), "AddInNative.dll").Количество()>0);	
		ИмяФайлаДравера = КаталогВременныхФайлов()+"AddInNative.dll";
		Если ДрайверЕстьВоВременныхФайлах = Ложь Тогда  // Создаём
    	    МакетДрайвера = ПолучитьОбщийМакет("AddInNative");
			МакетДрайвера.Записать(ИмяФайлаДравера);
		КонецЕсли;
		ПодключитьВнешнююКомпоненту(ИмяФайлаДравера, "NativeVK", ТипВнешнейКомпоненты.Native);
		Native = Новый("AddIn.NativeVK.SomeName");
	
		Возврат Native; 
	Исключение
		ОписаниеОшибки = "При подключении NativeVK произошла ошибка. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "NativeПодключитьКомпоненту", ОписаниеОшибки);	
		Возврат Неопределено; 	
	КонецПопытки
		
КонецФункции
// ВыполнитьКоманду - Выполнить указанную команду. 
// Возвращает: Структура с ответом, содержащая ключи: ОтветСтатус, ОтветАргумент, ОтветАргумент2, ОтветДопАргументNET(Только для NET), КомандаВыполнена, Ошибка. 
// Неопределено - Ошибка формата переменной.
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
// Команда - Число - Номер команды которую требуется выполнить
// Аргумент - Число - Аргумент для команды
Функция ВыполнитьКоманду(НомерCOMАдресПортОборудование, НомерПина, Команда, Аргумент, ДопАргументNET = "") Экспорт
	
	НомерCOMАдресПорт = НомерCOMАдресПортОборудование;
	//Вытаскиваем из справочника оборудование адрес/порт
	Если ТипЗнч(НомерCOMАдресПорт) = Тип("СправочникСсылка.Оборудование") Тогда // Команда на оборудование, определяем какое
		Если ТипЗнч(НомерCOMАдресПорт.КонтроллерCOMNET) = Тип("СправочникСсылка.КонтроллерыCOM") Тогда // COM
			НомерCOMАдресПорт = НомерCOMАдресПорт.КонтроллерCOMNET.НомерCOMПорта;
		ИначеЕсли ТипЗнч(НомерCOMАдресПорт.КонтроллерCOMNET) = Тип("СправочникСсылка.КонтроллерыNET") Тогда // NET
			НомерCOMАдресПорт = НомерCOMАдресПорт.КонтроллерCOMNET.АдресПорт;
		КонецЕсли;
	КонецЕсли;           
						
	Если ТипЗнч(НомерCOMАдресПорт) = Тип("Число") Тогда // Команда в COM порт
		Ответ = ВыполнитьКомандуCOM(НомерCOMАдресПорт, НомерПина, Команда, Аргумент);
	ИначеЕсли ТипЗнч(НомерCOMАдресПорт) = Тип("Строка") Тогда // Команда на сетевой адрес
		Ответ = ВыполнитьКомандуNET(НомерCOMАдресПорт, НомерПина, Команда, Аргумент, ДопАргументNET);	
	Иначе // Ошибка первой переменной
		Ответ = Неопределено;
		ОписаниеОшибки = "Ошибка формата переменной ""НомерCOMАдресПорт"". НомерCOMАдресПорт = """ + Строка(НомерCOMАдресПорт) + """, текущая команда = " + Команда;
		ЗаписьВЖурналОшибок("К", "ВыполнитьКоманду", ОписаниеОшибки);	
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции
Функция ВыполнитьКомандуCOM(НомерCOM, НомерПина, Команда, Аргумент)

	NativeS = NativeПодключитьКомпоненту();
	Если NativeS = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	COM.Команда
	               |ИЗ
	               |	РегистрСведений.COM КАК COM
	               |ГДЕ
	               |	COM.НомерCOMПорта = &НомерCOMПорта
	               |	И COM.НомерПина = &НомерПина
	               |	И (НЕ COM.КомандаВыполнена
	               |			ИЛИ COM.ДатаВыполнения > &ТекущаяДатаМинус5Сек)
	               |	И (НЕ COM.Ошибка
	               |			ИЛИ COM.ДатаВыполнения > &ТекущаяДатаМинус5Сек)";
	Запрос.УстановитьПараметр("НомерCOMПорта", НомерCOM);
	Запрос.УстановитьПараметр("НомерПина", НомерПина); 
	Запрос.УстановитьПараметр("ТекущаяДатаМинус5Сек", ТекущаяДата()-5); 
	// Запрос проверяет есть ли в очереди не выполненные задания 
	// или задания выполненные в течении последних 5 секунд	
	ВремяПрекращенияОжидания = ТекущаяДата()+15;
	Пока НЕ Запрос.Выполнить().Пустой() Цикл // Ждём завершения заданий
		Если ТекущаяДата() > ВремяПрекращенияОжидания Тогда // произошёл сбой
			ОписаниеОшибки = "Превышен лимит ожидания выполнения команды из очереди перед текущей. Текущая команда = " + Команда;
			ЗаписьВЖурналОшибок("К", "ВыполнитьКомандуCOM", ОписаниеОшибки);	
			Возврат Неопределено;
		КонецЕсли;
		NativeS.Задержка(30);	
		Запрос.УстановитьПараметр("ТекущаяДатаМинус5Сек", ТекущаяДата()-5); 
	КонецЦикла;
	
	Менеджер = РегистрыСведений.COM.СоздатьМенеджерЗаписи();
	Менеджер.НомерCOMПорта = НомерCOM;
	Менеджер.НомерПина = НомерПина;
	Менеджер.Команда = Команда;
	Менеджер.Аргумент = Аргумент;	
	Менеджер.Записать(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	COM.Команда
	                |ИЗ
	                |	РегистрСведений.COM КАК COM
	                |ГДЕ
	                |	COM.НомерCOMПорта = &НомерCOMПорта
	                |	И COM.НомерПина = &НомерПина
	                |	И (COM.КомандаВыполнена
	                |			ИЛИ COM.Ошибка)";
	Запрос.УстановитьПараметр("НомерCOMПорта", НомерCOM);
	Запрос.УстановитьПараметр("НомерПина", НомерПина); 
	// Запрос Проверяет выполнена ли наше задание
	ВремяПрекращенияОжидания = ТекущаяДата()+15;
	Пока Запрос.Выполнить().Пустой() Цикл // Ждём завершения задания
		Если ТекущаяДата() > ВремяПрекращенияОжидания Тогда // произошёл сбой
			ОписаниеОшибки = "Превышен лимит ожидания выполнения команды. Текущая команда = " + Команда;
			ЗаписьВЖурналОшибок("К", "ВыполнитьКомандуCOM", ОписаниеОшибки);	
			Возврат Неопределено;
		КонецЕсли;
		NativeS.Задержка(30);	
	КонецЦикла;
	
	Менеджер = РегистрыСведений.COM.СоздатьМенеджерЗаписи();
	Менеджер.НомерCOMПорта = НомерCOM;
	Менеджер.НомерПина = НомерПина;
	Менеджер.Прочитать();	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ОтветСтатус", Менеджер.ОтветСтатус);
	СтруктураОтвета.Вставить("ОтветАргумент1", Менеджер.ОтветАргумент1);
    СтруктураОтвета.Вставить("ОтветАргумент2", Менеджер.ОтветАргумент2);
	СтруктураОтвета.Вставить("КомандаВыполнена", Менеджер.КомандаВыполнена);
	СтруктураОтвета.Вставить("Ошибка", Менеджер.Ошибка);
	Менеджер.Удалить();
	
	Возврат СтруктураОтвета;

КонецФункции
Функция ВыполнитьКомандуNET(АдресПорт, НомерПина, Команда, Аргумент, ДопАргументNET = "")

	NativeS = NativeПодключитьКомпоненту();
	Если NativeS = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	NET.Команда
	               |ИЗ
	               |	РегистрСведений.NET КАК NET
	               |ГДЕ
	               |	NET.АдресПорт = &АдресПорт
	               |	И NET.НомерПина = &НомерПина
	               |	И (НЕ NET.КомандаВыполнена
	               |			ИЛИ NET.ДатаВыполнения > &ТекущаяДатаМинус5Сек)
	               |	И (НЕ NET.Ошибка
	               |			ИЛИ NET.ДатаВыполнения > &ТекущаяДатаМинус5Сек)";
	Запрос.УстановитьПараметр("АдресПорт", АдресПорт);
	Запрос.УстановитьПараметр("НомерПина", НомерПина); 
	Запрос.УстановитьПараметр("ТекущаяДатаМинус5Сек", ТекущаяДата()-5); 
	// Запрос проверяет есть ли в очереди не выполненные задания 
	// или задания выполненные в течении последних 5 секунд	
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрСведений.NET";
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("АдресПорт", АдресПорт); 
	ЭлементБлокировки.УстановитьЗначение("НомерПина", НомерПина);
	~ПовторениеПопыткиЗаблокироватьРегистр:
	ВремяПрекращенияОжидания = ТекущаяДата()+15;
	Попытка
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Блокировка.Заблокировать();
		Пока НЕ Запрос.Выполнить().Пустой() Цикл // Ждём завершения заданий
			ЗафиксироватьТранзакцию();
			Если ТекущаяДата() > ВремяПрекращенияОжидания Тогда // произошёл сбой
				ЗафиксироватьТранзакцию();
				ОписаниеОшибки = "Превышен лимит ожидания выполнения команды из очереди перед текущей. Текущая команда = " + Команда;
				ЗаписьВЖурналОшибок("К", "ВыполнитьКомандуNET", ОписаниеОшибки);	
				Возврат Неопределено;
			КонецЕсли;
			NativeS.Задержка(30);	
			Запрос.УстановитьПараметр("ТекущаяДатаМинус5Сек", ТекущаяДата()-5); 
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			Блокировка.Заблокировать();
		КонецЦикла;		
		
		Менеджер = РегистрыСведений.NET.СоздатьМенеджерЗаписи();
		Менеджер.АдресПорт = АдресПорт;
		Менеджер.НомерПина = НомерПина;
		Менеджер.Команда = Команда;
		Менеджер.Аргумент = Аргумент;	
		Менеджер.ДопАргументNET = ДопАргументNET;
		Менеджер.Записать(Истина);
		
		ЗафиксироватьТранзакцию();		
	Исключение
		// Данная ситуация возникает крайне редко, в момент когда 2 сеанса практически одновременно читают регистр
		// и один из них делает запись в промежуток между чтением и записью вторым
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ОписаниеОшибки = "Ошибка блокировки Регистра NET. Попытка прочитать регистр в промежуток между чтением и записью в другом сеансе. Описание ошибки = " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "ВыполнитьКомандуNET", ОписаниеОшибки);	
		NativeS.Задержка(30); // Ждём 30 мсек
		Перейти ~ПовторениеПопыткиЗаблокироватьРегистр;    
	КонецПопытки;
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	NET.Команда
	               |ИЗ
	               |	РегистрСведений.NET КАК NET
	               |ГДЕ
	               |	NET.АдресПорт = &АдресПорт
	               |	И NET.НомерПина = &НомерПина
	               |	И (NET.КомандаВыполнена
	               |			ИЛИ NET.Ошибка)";
	Запрос.УстановитьПараметр("АдресПорт", АдресПорт);
	Запрос.УстановитьПараметр("НомерПина", НомерПина); 
	// Запрос Проверяет выполнена ли наше задание
	ВремяПрекращенияОжидания = ТекущаяДата()+15;
	Пока Запрос.Выполнить().Пустой() Цикл // Ждём завершения задания
		Если ТекущаяДата() > ВремяПрекращенияОжидания Тогда // произошёл сбой
			ОписаниеОшибки = "Превышен лимит ожидания выполнения команды. Текущая команда = " + Команда;
			ЗаписьВЖурналОшибок("К", "ВыполнитьКомандуNET", ОписаниеОшибки);	
			Возврат Неопределено;
		КонецЕсли;
		NativeS.Задержка(30);	
	КонецЦикла;
	
	Менеджер = РегистрыСведений.NET.СоздатьМенеджерЗаписи();
	Менеджер.АдресПорт = АдресПорт;
	Менеджер.НомерПина = НомерПина;
	Менеджер.Прочитать();	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ОтветСтатус", Менеджер.ОтветСтатус);
	СтруктураОтвета.Вставить("ОтветАргумент1", Менеджер.ОтветАргумент1);
    СтруктураОтвета.Вставить("ОтветАргумент2", Менеджер.ОтветАргумент2);
	СтруктураОтвета.Вставить("ОтветДопАргументNET", Менеджер.ОтветДопАргументNET);	
	СтруктураОтвета.Вставить("КомандаВыполнена", Менеджер.КомандаВыполнена);
	СтруктураОтвета.Вставить("Ошибка", Менеджер.Ошибка);
	Менеджер.Удалить();
	
	Возврат СтруктураОтвета;

КонецФункции
                            
//////////////////////////////////////////////////////////////////////////////////////////////

// АвтоСброс - (1) Особая команда по сбросу всех значений в случае потери связи.
// Ардуина будет перезагружена (программно, осуществив переход на 0 точку) если по истечению
// переданного времени не получит эту команду повторно. Передача 0 отключает проверку связи
// и перезагрузку ардуины, 1-255 включает. После перезагрузки все пины будут переведены в 
// исходное состояние, а эта команда отключена.
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// Время - Число - Время в секундах, диапазон [0-255], 0 - выключить, 1-255 - включить и передать время. 
Функция АвтоСброс(НомерCOMАдресПорт, Время) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, 0, 1, Время);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "АвтоСброс", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////

// pinMode - (2) Перевести ПИН в состояние INPUT или OUTPUT. 
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
// Состояние - Число - Состояние в которое нужно перевести 0=INPUT  1=OUTPUT
Функция pinMode(НомерCOMАдресПорт, НомерПина, Состояние) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 2, Состояние);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "pinMode", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// digitalWrite - (3) Задать на цифровом ПИНе напряжение НИЗКОЕ или ВЫСОКОЕ вольт. 
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
// Значение - Число - Напряжение 0=LOW 1=HIGH
Функция digitalWrite(НомерCOMАдресПорт, НомерПина, Значение) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 3, Значение);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "digitalWrite", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// analogWrite - (4) Задать на цифровом ПИНе ШИМ 0-255. 
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
// Значение - Число - Скважность 0-255
Функция analogWrite(НомерCOMАдресПорт, НомерПина, Значение) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 4, Значение);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "analogWrite", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// digitalRead - (5) Прочитать значение на цифровом ПИНе НИЗКОЕ или ВЫСОКОЕ. 
// Возвращает: 0 - НИЗКОЕ, 1 - ВЫСОКОЕ, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
Функция digitalRead(НомерCOMАдресПорт, НомерПина) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 5, 0);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = СтруктураОтвета.ОтветАргумент1;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "digitalRead", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// analogRead - (6) Прочитать значение на аналоговом ПИНе 0-1023. 
// Возвращает: 0 - 1023, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
Функция analogRead(НомерCOMАдресПорт, НомерПина) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 6, 0);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = СтруктураОтвета.ОтветАргумент1*16+СтруктураОтвета.ОтветАргумент2;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "analogRead", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// tone - (7) сгенерировать на пине прямоугольную волну с 50% заполнением с заданной в герцах частотой . 
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С  
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
// Частота - Число - Частота в герцах в диапазоне 0-255
Функция tone(НомерCOMАдресПорт, НомерПина, Частота) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 7, Частота);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "tone", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// noTone - (8) Останавливает сигнал, генерируемый на порту Tone(). 
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С  
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
Функция noTone(НомерCOMАдресПорт, НомерПина) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 8, 0);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "noTone", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// analogReference - (9) Задаёт опорное напряжение относительно которого происходят аналоговые измерения. 
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С  
// Параметры:
// НомерCOMАдресПорт - Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// Тип - Число -  1=DEFAULT, 2=INTERNAL1V1, 3=INTERNAL2V56, 0=EXTERNAL
Функция analogReference(НомерCOMАдресПорт, Тип) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, 0, 9, Тип);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "analogReference", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// IrReceiving - (10) Принимает инфрокрасный сигнал с ИК детектора подключённого к указанному пину (Доступно только для NET) 
// Возвращает: NEC код сигнала или "0000000000000000", Ложь - Ошибка, Неопределено - Сбой внутри 1С
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - сетевой адрес контроллера
// НомерПина - Число - Номер пина
Функция IrReceiving(НомерCOMАдресПорт, НомерПина) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 10, 0);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = СтруктураОтвета.ОтветДопАргументNET;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "IrReceiving", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// IrSend - (11) Отправляет инфрокрасный сигнал с ИК светодиода подключённого к указанному пину (Доступно только для NET) 
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С  
// Параметры:
// НомерCOMАдресПорт - Строка/Ссылка на справочник оборудование - сетевой адрес контроллера
// НомерПина - Число - Номер пина
// NEC - Строка - NEC код команды
Функция IrSend(НомерCOMАдресПорт, НомерПина,  NEC) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 11, 0, NEC);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "IrSend", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// UzDistance - (12) Измерить расстояние Ультрозвуковым дальнометром 0-1023. 
// Возвращает: 0 - 1023 (Расстояние в сантиметрах), Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПинаTrig - Число - Номер пина к которому подключён контакт Trig
// НомерПинаEcho - Число - Номер пина к которому подключён контакт Echo 
Функция UzDistance(НомерCOMАдресПорт, НомерПинаTrig, НомерПинаEcho) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПинаTrig, 12, НомерПинаEcho);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = СтруктураОтвета.ОтветАргумент1*16+СтруктураОтвета.ОтветАргумент2;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "UzDistance", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////

// _pinMode_digitalWrite - (101) Перевести ПИН в состояние OUTPUT и задать на нём напряжение НИЗКОЕ или ВЫСОКОЕ вольт. 
// Возвращает: Истина - Команда выполнена, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
// Значение - Число - Напряжение 0=LOW 1=HIGH
Функция _pinModeOUTPUT_digitalWrite(НомерCOMАдресПорт, НомерПина, Значение) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 101, Значение);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "_pinModeOUTPUT_digitalWrite", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// _pinModeINPUT_digitalRead - (102) Перевести ПИН в состояние INPUT и прочитать напряжение на нём НИЗКОЕ или ВЫСОКОЕ. 
// Возвращает: 0 - НИЗКОЕ, 1 - ВЫСОКОЕ, Ложь - Ошибка, Неопределено - Сбой внутри 1С  
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
Функция _pinModeINPUT_digitalRead(НомерCOMАдресПорт, НомерПина) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 102, 0);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = СтруктураОтвета.ОтветАргумент1;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "_pinModeINPUT_digitalRead", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// _ТемператураВлажностьDHT11 - (103) Измерить Температуру и Влажность датчиком DHT11. 
// Возвращает: Структура с температурой в Цельсиях и относительной влажностью в %, Ложь - Ошибка, Неопределено - Сбой внутри 1С  
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
Функция _ТемператураВлажностьDHT11(НомерCOMАдресПорт, НомерПина) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 103, 0);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда
			Ответ = Новый Структура();
			Ответ.Вставить("Температура", СтруктураОтвета.ОтветАргумент1);
			Ответ.Вставить("Влажность", СтруктураОтвета.ОтветАргумент2);
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "_ТемператураВлажностьDHT11", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// _analogRead_СреднееАрифметическое - (104) Провести ряд последовательных измерений и вернуть среднее арифметическое. 
// Возвращает: 0 - 1023, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
// Количество100 - количество измерений в сотнях (Измерение будет сделано 100*Количество раз, одно измерение длится 112 микросекунд)(1-255)
Функция _analogRead_СреднееАрифметическое(НомерCOMАдресПорт, НомерПина, Количество100) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 104, Количество100);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда 
			Ответ = СтруктураОтвета.ОтветАргумент1*16+СтруктураОтвета.ОтветАргумент2;
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "_analogRead_СреднееАрифметическое", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// _ТемператураВлажностьDHT21 - (105) Измерить Температуру и Влажность датчиком DHT21. 
// Возвращает: Структура с температурой в Цельсиях и относительной влажностью в %, Ложь - Ошибка, Неопределено - Сбой внутри 1С  
// Параметры:
// НомерCOMАдресПорт - Число/Строка/Ссылка на справочник оборудование - Номер ком порта к которому подключен контроллер или сетевой адрес контроллера (Если Число то COM если Строка то NET)
// НомерПина - Число - Номер пина
Функция _ТемператураВлажностьDHT21(НомерCOMАдресПорт, НомерПина) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOMАдресПорт, НомерПина, 105, 0);
		Если СтруктураОтвета.КомандаВыполнена И СтруктураОтвета.ОтветСтатус = 254 Тогда
			Ответ = Новый Структура();
			Ответ.Вставить("Температура", СтруктураОтвета.ОтветАргумент1-100); // температура смещена на 100 т.к. возможен отрицательный диапазон
			Ответ.Вставить("Влажность", СтруктураОтвета.ОтветАргумент2);
		ИначеЕсли СтруктураОтвета.Ошибка ИЛИ СтруктураОтвета.ОтветСтатус <> 254 Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при выполнении функции для команды. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "_ТемператураВлажностьDHT21", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////

// ОткрытьCOMПорт - (256) Открыть/Переоткрыть указанный COM порт на указанной скорости. 
// Возвращает: Истина - Порт открыт, Ложь - Порт занят либо несуществует, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOM - Число - Номер ком порта к которому подключен контроллер
// Скорость - Число - Скорость в БИТАХ
Функция ОткрытьCOMПорт(НомерCOM, Скорость) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOM, 0, 256, Скорость);
		Если СтруктураОтвета.КомандаВыполнена Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при открытии порта. Номер порта = " + НомерCOM + ". Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "ОткрытьCOMПорт", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// ЗакрытьCOMПорт - (257) Закрыть указанный COM порт. 
// Возвращает: Истина - Порт Закрыт, Ложь - Ошибка, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOM - Число - Номер ком порта к которому подключен контроллер
Функция ЗакрытьCOMПорт(НомерCOM) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOM, 0, 257, 0);
		Если СтруктураОтвета.КомандаВыполнена Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при закрытии порта. Номер порта = " + НомерCOM + ". Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "ЗакрытьCOMПорт", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// ПересоздатьКомпонентуИОткрытьCOMПорт - (258) Закрыть комп порт если открыт,
// пересоздать компоненту и открыть указанный COM порт на указанной скорости. 
// Возвращает: Истина - Порт открыт, Ложь - Порт занят либо несуществует, Неопределено - Сбой внутри 1С 
// Параметры:
// НомерCOM - Число - Номер ком порта к которому подключен контроллер
// Скорость - Число - Скорость в БИТАХ
Функция ПересоздатьКомпонентуИОткрытьCOMПорт(НомерCOM, Скорость) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOM, 0, 258, Скорость);
		Если СтруктураОтвета.КомандаВыполнена Тогда 
			Ответ = Истина;
		ИначеЕсли СтруктураОтвета.Ошибка Тогда 
			Ответ = Ложь;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при переоткрытии COM порта. Номер порта = " + НомерCOM + ". Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "ПересоздатьКомпонентуИОткрытьCOMПорт", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

// ПроверитьКомпонентуИСвязьCOMПорта - (259) Выполнить проверку наличия компоненты
// для указанного COM порта и (Необязательно) проверить связь с контроллером.  
// Возвращает: 1 - Успешно, 2 - Компоненты нет, 3 - Компонента есть, но проверка связи завершилась неудачей,
// Неопределено - Сбой внутри 1С
// Параметры:
// НомерCOM - Число - Номер ком порта к которому подключен контроллер
// НужнаПроверкаСвязи - Булево - По умолчанию Ложь
Функция ПроверитьКомпонентуИСвязьCOMПорта(НомерCOM, НужнаПроверкаСвязи = Ложь) Экспорт 
	
	Попытка
		СтруктураОтвета = ВыполнитьКоманду(НомерCOM, 0, 259, ?(НужнаПроверкаСвязи, 1, 0));
		Если СтруктураОтвета.КомандаВыполнена Тогда 
			Ответ = СтруктураОтвета.ОтветАргумент1;
		Иначе
			Ответ = Неопределено;
		КонецЕсли;
		Возврат Ответ;		
	Исключение			
		ОписаниеОшибки = "Сбой при проверки Компоненты/Связи COM порта. Номер порта = " + НомерCOM + ". Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("К", "ПроверитьКомпонентуИСвязьCOMПорта", ОписаниеОшибки);	
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////

// ПерезапуститьАгентСервера1С - () Завершает и снова запускает службу Агент сервера 1С, при выполнение завершаются все сеансы 
// Параметры: 
// Ошибка - Булево - Если процедура вызывается из-за ошибки, по умолчанию ложь (Необязательный)
Процедура ПерезапуститьАгентСервера1С(Ошибка = Ложь) Экспорт 
	
	Если Ошибка Тогда
		ОписаниеОшибки = "Перезапуск службы агент сервера 1С";
		ЗаписьВЖурналОшибок("К", "ПерезапуститьАгентСервера1С", ОписаниеОшибки);
	КонецЕсли;
		
	ИмяСценарияПерезапуска = КаталогВременныхФайлов() + "CMDRestartProg.cmd";
	СценарийПерезапуска = Новый ЗаписьТекста(ИмяСценарияПерезапуска, КодировкаТекста.ANSI);
	СценарийПерезапуска.ЗаписатьСтроку("net stop ""1C:Enterprise 8.3 Server Agent"" && net start ""1C:Enterprise 8.3 Server Agent""");
	СценарийПерезапуска.Закрыть();        
	
	ИмяСценарияПриложения = КаталогВременныхФайлов() + "CMDRunProg.cmd";
	СценарийПриложения = Новый ЗаписьТекста(ИмяСценарияПриложения, КодировкаТекста.ANSI);
	СценарийПриложения.ЗаписатьСтроку("mshta ""vbscript:CreateObject(""Shell.Application"").ShellExecute(""" + ИмяСценарияПерезапуска + """, """", """", ""runas"", 1) & Close()""");
	СценарийПриложения.Закрыть();   
	
	ЗапуститьПриложение(ИмяСценарияПриложения);  // останавливает агент сервера 1С, завершаются сеансы
	
	// изменить имя службы = "1C:Enterprise 8.3 Server Agent" на свою
	// у пользователя сервера 1С должно быть отключено окно блокировки запуска программ под администатором
КонецПроцедуры

// ПерезагрузитьСервер1С - () Перезагружает компьютер на котором запущен сервер 1С, при выполнение завершаются все сеансы 
// Параметры: 
// Ошибка - Булево - Если процедура вызывается из-за ошибки, по умолчанию ложь (Необязательный)
Процедура ПерезагрузитьСервер1С(Ошибка = Ложь) Экспорт 
	
	Если Ошибка Тогда
		ОписаниеОшибки = "Перезагрузка компьютера";
		ЗаписьВЖурналОшибок("К", "ПерезагрузитьСервер1С", ОписаниеОшибки);
	КонецЕсли;
	
	ИмяСценарияПерезагрузки = КаталогВременныхФайлов() + "CMDRestartAppor.cmd";
	СценарийПерезагрузки = Новый ЗаписьТекста(ИмяСценарияПерезагрузки, КодировкаТекста.ANSI);
	СценарийПерезагрузки.ЗаписатьСтроку("shutdown /r /t 1");
	СценарийПерезагрузки.Закрыть();        
	
	ИмяСценарияПриложения = КаталогВременныхФайлов() + "CMDRunAppor.cmd";
	СценарийПриложения = Новый ЗаписьТекста(ИмяСценарияПриложения, КодировкаТекста.ANSI);
	СценарийПриложения.ЗаписатьСтроку("mshta ""vbscript:CreateObject(""Shell.Application"").ShellExecute(""" + ИмяСценарияПерезагрузки + """, """", """", ""runas"", 1) & Close()""");
	СценарийПриложения.Закрыть();   
	
	ЗапуститьПриложение(ИмяСценарияПриложения);  // останавливает агент сервера 1С, завершаются сеансы

	// у пользователя сервера 1С должно быть отключено окно блокировки запуска программ под администатором
КонецПроцедуры

