

Процедура ПолучитьНовыеСообщения(Оборудование = Неопределено)Экспорт 
	
	ПоследнийUpdateId = ПолучитьПоследнийUpdateIdТелеграмБота();

	Если ЗначениеЗаполнено(ПоследнийUpdateId)Тогда
		OffSet = "?offset="+Формат(ПоследнийUpdateId + 1, "ЧДЦ=0; ЧГ=");
	Иначе
		OffSet = "";
	КонецЕсли;
	
	Ключ = ПолучитьКлючAPIТелеграмБота();
	Сервер = "api.telegram.org";
	
	Если ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда 
		Прокси = ВебОбщий.ПолучитьПодходящийПрокси("https");
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
		
	Команда = "getUpdates"+OffSet;
	Ресурс = "bot"+Ключ+"/"+Команда;
	Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,20,Новый ЗащищенноеСоединениеOpenSSL);
	Запрос = Новый HTTPЗапрос(Ресурс); 
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
		ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
		Если ОтветСоотв["ok"] Тогда
			update_idПоследнегоСообщения = ЗаписатьНовыеСообщения(ОтветСоотв);
			Если ЗначениеЗаполнено(update_idПоследнегоСообщения) Тогда 
				ЗаписатьПоследнийUpdateIdТелеграмБота(Число(update_idПоследнегоСообщения));
			КонецЕсли;
		КонецЕсли;
		Если  ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда
			ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = "Ошибка при получении новых сообщений. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПолучитьНовыеСообщения", ОписаниеОшибки);
		Если  ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда
			ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Ложь);
		КонецЕсли;	
	КонецПопытки;
	
КонецПроцедуры

Процедура ПовторноПроверитьЗагрузитьВложенияИОбработатьНеОбработанныеВходящиеСообщений(Оборудование = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТелеграмСообщенияВходящиеТребующиеПроверкиЗагрузкиВложений.Сообщение
	               |ИЗ
	               |	РегистрСведений.ТелеграмСообщенияВходящиеТребующиеПроверкиЗагрузкиВложений КАК ТелеграмСообщенияВходящиеТребующиеПроверкиЗагрузкиВложений
	               |ГДЕ
	               |	НЕ ТелеграмСообщенияВходящиеТребующиеПроверкиЗагрузкиВложений.ВПроцессеОбработки";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Для Каждого Элемент Из Выгрузка Цикл
		ПроверитьЗагрузитьВложенияВходящегоСообщения(Элемент.Сообщение);		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПовторноОбработатьПроверенныеЗагруженныеНеОбработанныеСообщения(Оборудование = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные.Сообщение
	               |ИЗ
	               |	РегистрСведений.ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные КАК ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные
	               |ГДЕ
	               |	НЕ ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные.ВПроцессеОбработки";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Для Каждого Элемент Из Выгрузка Цикл
		ОбработатьВходящееСообщение(Элемент.Сообщение);		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПовторноОтправитьНеОтправленныеИсходящиеСообщения(Оборудование = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТелеграмСообщенияИсходящиеКОтправке.Сообщение КАК Сообщение
	               |ИЗ
	               |	РегистрСведений.ТелеграмСообщенияИсходящиеКОтправке КАК ТелеграмСообщенияИсходящиеКОтправке
	               |ГДЕ
	               |	НЕ ТелеграмСообщенияИсходящиеКОтправке.ВПроцессеОбработки";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Для Каждого Элемент Из Выгрузка Цикл
		ОтправитьСообщениеИсходящие(Элемент.Сообщение);		
	КонецЦикла;	
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////
//Вызываемые процедуры функции
Функция ПолучитьАдресТелеграмБота() Экспорт
	
	СтрСНастройкой = Справочники.Настройки.ТелеграмОсновныеНастройки.ТаблицаНастроек.Найти("АдресБота", "Параметр");
	Если СтрСНастройкой = Неопределено Тогда 
		Значение = "";
	Иначе
		Значение = СтрСНастройкой.Значение;	
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
Функция ПолучитьКлючAPIТелеграмБота() Экспорт
	
	СтрСНастройкой = Справочники.Настройки.ТелеграмОсновныеНастройки.ТаблицаНастроек.Найти("КлючAPI", "Параметр");
	Если СтрСНастройкой = Неопределено Тогда 
		Значение = "";
	Иначе
		Значение = СтрСНастройкой.Значение;	
	КонецЕсли;
	
	Возврат Значение;

КонецФункции
Функция ПолучитьПризнакИспользованияПроксиТелеграмБота() Экспорт
	
	СтрСНастройкой = Справочники.Настройки.ТелеграмОсновныеНастройки.ТаблицаНастроек.Найти("ПроксиИспользовать", "Параметр");
	Если СтрСНастройкой = Неопределено Тогда 
		Значение = Ложь;
	Иначе
		Значение = СтрСНастройкой.Значение;	
	КонецЕсли;
	
	Возврат Значение;

КонецФункции
Функция ПолучитьШаблонДеактивацииТекущегоИИТелеграмБота() Экспорт
	
	СтрСНастройкой = Справочники.Настройки.ТелеграмОсновныеНастройки.ТаблицаНастроек.Найти("ШаблонДеактивироватьТекущийИИ", "Параметр");
	Если СтрСНастройкой = Неопределено Тогда 
		Значение = "";
	Иначе
		Значение = СтрСНастройкой.Значение;	
	КонецЕсли;
	
	Возврат Значение;

КонецФункции
Функция ПолучитьШаблонСозданияИОткрытияГруппыСообщенийТелеграмБота() Экспорт
	
	СтрСНастройкой = Справочники.Настройки.ТелеграмОсновныеНастройки.ТаблицаНастроек.Найти("ШаблонСоздатьИОткрытьГруппуСообщений", "Параметр");
	Если СтрСНастройкой = Неопределено Тогда 
		Значение = "";
	Иначе
		Значение = СтрСНастройкой.Значение;	
	КонецЕсли;
	
	Возврат Значение;

КонецФункции
Функция ПолучитьШаблонЗакрытияТекущейГруппыСообщенийТелеграмБота() Экспорт
	
	СтрСНастройкой = Справочники.Настройки.ТелеграмОсновныеНастройки.ТаблицаНастроек.Найти("ШаблонЗакрытьТекущуюГруппуСообщений", "Параметр");
	Если СтрСНастройкой = Неопределено Тогда 
		Значение = "";
	Иначе
		Значение = СтрСНастройкой.Значение;	
	КонецЕсли;
	
	Возврат Значение;

КонецФункции
Функция ПолучитьПоследнийUpdateIdТелеграмБота() Экспорт
	
	ПоследнийUpdateId = РегистрыСведений.ТекущиеДанныеОборудования.Получить(Новый Структура("Оборудование,ОбъектДанных",Справочники.Оборудование.ТелеграмБот, "ПоследнийUpdateId")).Данные;
	Возврат ПоследнийUpdateId;
	
КонецФункции
Процедура ЗаписатьПоследнийUpdateIdТелеграмБота(update_idПоследнегоСообщения) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ТекущиеДанныеОборудования.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Оборудование = Справочники.Оборудование.ТелеграмБот;
	МенеджерЗаписи.ОбъектДанных = "ПоследнийUpdateId";
	МенеджерЗаписи.Данные = update_idПоследнегоСообщения;
	МенеджерЗаписи.Дата = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////

Функция ЗаписатьНовыеСообщения(ОтветСоотв)
	
	Последнийupdate_id = Неопределено;
	
	Для Каждого upd Из ОтветСоотв["result"] Цикл
			
		Если ЗначениеЗаполнено(upd["message"]) Тогда // Сообщение					
			message = upd["message"];
			
			//Ищем/Создаём контакт отправителя ++
			ТелеграмКонтакт = НайтиСоздатьТелеграмКонтакт(message["chat"]);
			//Ищем/Создаём контакт отправителя --
			
			//Создаём документ сообщение входящее++
			СсыдкаНаДокумент = СоздатьДокумент(upd, ТелеграмКонтакт);
			//Создаём документ сообщение входящее--
			
			//Записываем геоданные++
			Если message["location"] <> Неопределено Тогда
				ЗаписатьКоординатыПользователя(message, МестноеВремя(Дата('19700101')+message["date"]), ТелеграмКонтакт);
			КонецЕсли;
			//Записываем геоданные--
			
			//Найдём/Создадим полученный в сообщении контакт++
			Если message["contact"] <> Неопределено Тогда
				НайтиСоздатьТелеграмКонтакт(message["contact"]);
			КонецЕсли;
			//Найдём/Создадим полученный в сообщении контакт--


			МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеТребующиеПроверкиЗагрузкиВложений.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Сообщение = СсыдкаНаДокумент;
			МенеджерЗаписи.Записать(Истина);
			
			мПараметры = Новый Массив();
			мПараметры.Добавить(СсыдкаНаДокумент);
			ОбщегоНазначения.ВыполнитьПроцедуруФункциюВФонеНаСервере("ТелеграмМодуль.ПроверитьЗагрузитьВложенияВходящегоСообщения",мПараметры);
			
		ИначеЕсли ЗначениеЗаполнено(upd["edited_message"]) Тогда // Изменение сообщения
			edited_message = upd["edited_message"];	
			
			//Ищем/Создаём контакт отправителя ++
			ТелеграмКонтакт = НайтиСоздатьТелеграмКонтакт(edited_message["chat"]);
			//Ищем/Создаём контакт отправителя --

			
			Если edited_message["location"] <> Неопределено Тогда
				ЗаписатьКоординатыПользователя(edited_message, МестноеВремя(Дата('19700101')+edited_message["edit_date"]), ТелеграмКонтакт);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(upd["callback_query"]) Тогда // Нажатие кнопки
			
			callback_query = upd["callback_query"];
			
			//Ищем/Создаём контакт отправителя ++
			ТелеграмКонтакт = НайтиСоздатьТелеграмКонтакт(callback_query["message"]["chat"]);
			//Ищем/Создаём контакт отправителя --
			
			//Создаём документ сообщение входящее++
			СсыдкаНаДокумент = СоздатьДокумент(upd, ТелеграмКонтакт);
			//Создаём документ сообщение входящее--
						
			МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Сообщение = СсыдкаНаДокумент;
			МенеджерЗаписи.Записать(Истина);
			
			мПараметры = Новый Массив();
			мПараметры.Добавить(СсыдкаНаДокумент);
			ОбщегоНазначения.ВыполнитьПроцедуруФункциюВФонеНаСервере("ТелеграмМодуль.ОбработатьВходящееСообщение",мПараметры);
			
		Иначе
			// Тут можно дописать обработки для других команд			
		КонецЕсли;
		
		Последнийupdate_id = upd["update_id"]; 
	КонецЦикла;
	
	Возврат Последнийupdate_id;
	
КонецФункции

Функция НайтиСоздатьТелеграмКонтакт(ДанныеКонтакта)
	
	ИДКонтакнта = Неопределено;  
	Если ДанныеКонтакта["id"] <> Неопределено Тогда
		ИДКонтакнта = ДанныеКонтакта["id"];
	ИначеЕсли ДанныеКонтакта["user_id"] <> Неопределено Тогда
		ИДКонтакнта = ДанныеКонтакта["user_id"];
	КонецЕсли;		
	Если ИДКонтакнта = Неопределено Тогда // ИД обязательный реквизит
		ОписаниеОшибки = "Телеграм. Попытка создать контакт бе ИД";
		ЗаписьВЖурналОшибок("ТелеграмМодуль", "СоздатьТелеграмКонтакт", ОписаниеОшибки);	
		Возврат Справочники.ТелеграмКонтакты.ПустаяСсылка();					
	КонецЕсли;	
	ТелеграмКонтакт = Справочники.ТелеграмКонтакты.НайтиПоРеквизиту("ИД",ИДКонтакнта);
	Если ЗначениеЗаполнено(ТелеграмКонтакт) Тогда //Контакт существует
		Возврат ТелеграмКонтакт;
	КонецЕсли;
	
	
	НовыйТелеграмКонтакт = Справочники.ТелеграмКонтакты.СоздатьЭлемент();
	Если ДанныеКонтакта["username"] <> Неопределено Тогда 
		НовыйТелеграмКонтакт.Наименование = ДанныеКонтакта["username"]; 
	ИначеЕсли ДанныеКонтакта["first_name"] <> Неопределено Тогда
		НовыйТелеграмКонтакт.Наименование = ДанныеКонтакта["first_name"];
	ИначеЕсли ДанныеКонтакта["last_name"] <> Неопределено Тогда
		НовыйТелеграмКонтакт.Наименование = ДанныеКонтакта["last_name"];
	ИначеЕсли ДанныеКонтакта["title"] <> Неопределено Тогда
		НовыйТелеграмКонтакт.Наименование = ДанныеКонтакта["title"];	
	Иначе
		НовыйТелеграмКонтакт.Наименование = ИДКонтакнта;
	КонецЕсли;
			
	НовыйТелеграмКонтакт.ИД = ИДКонтакнта;	
	
	Если ДанныеКонтакта["username"] <> Неопределено Тогда 
		НовыйТелеграмКонтакт.username = ДанныеКонтакта["username"];
	КонецЕсли;	
	Если ДанныеКонтакта["first_name"] <> Неопределено Тогда 
		НовыйТелеграмКонтакт.first_name = ДанныеКонтакта["first_name"];
	КонецЕсли;	
	Если ДанныеКонтакта["last_name"] <> Неопределено Тогда 
		НовыйТелеграмКонтакт.last_name = ДанныеКонтакта["last_name"];
	КонецЕсли;		
	Если ДанныеКонтакта["type"] <> Неопределено Тогда
		НовыйТелеграмКонтакт.type = ДанныеКонтакта["type"];
	КонецЕсли;
	Если ДанныеКонтакта["phone_number"] <> Неопределено Тогда
		НовыйТелеграмКонтакт.phone_number = ДанныеКонтакта["phone_number"];
	КонецЕсли;
	
	//Включаем разрешение на обработку сообщений если параметр 
	СтрСНастройкой = Справочники.Настройки.ТелеграмОсновныеНастройки.ТаблицаНастроек.Найти("НовымКонтактамДоступнаОбработкаСообщений", "Параметр");
	Если СтрСНастройкой = Неопределено Тогда 
		ЗначениеДоступнаОбработкаСообщений = Ложь;
	Иначе
		ЗначениеДоступнаОбработкаСообщений = СтрСНастройкой.Значение;	
	КонецЕсли;
	Если ЗначениеДоступнаОбработкаСообщений = Истина Тогда
		НовыйТелеграмКонтакт.ДоступОбработкаСообщений = Истина;	
	КонецЕсли;
	
	
	НовыйТелеграмКонтакт.Записать();
	
	Возврат НовыйТелеграмКонтакт.Ссылка;
	
КонецФункции

Процедура ЗаписатьКоординатыПользователя(message, Дата, ТелеграмКонтакт)	
	
	МенеджерЗаписи = РегистрыСведений.ТелеграмГеоданныеКонтакта.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Дата; 
	МенеджерЗаписи.ТелеграмКонтакт = ТелеграмКонтакт;
	МенеджерЗаписи.latitude = message["location"]["latitude"];
	МенеджерЗаписи.longitude = message["location"]["longitude"];
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция СоздатьДокумент(upd, ТелеграмКонтакт)
	
	
	нДокумент = Документы.ТелеграмСообщенияВходящие.СоздатьДокумент();
	нДокумент.ТелеграмКонтакт = ТелеграмКонтакт;
	нДокумент.ДатаПолученияСообщения = ТекущаяДата();
	нДокумент.update_id = upd["update_id"];	
	
	Если ЗначениеЗаполнено(upd["message"]) Тогда   
		message = upd["message"];	
		нДокумент.Дата = МестноеВремя(Дата('19700101')+message["date"]); 
		нДокумент.СообщениеИД = message["message_id"];	 
		Если message.Получить("text") <> Неопределено Тогда
			нДокумент.Текст = message["text"]; 	
		КонецЕсли;
		ЗаписатьКоллекциюВТаблДокументаСообщение(0, message, нДокумент.СодержаниеСообщения);	
	КонецЕсли;
	Если ЗначениеЗаполнено(upd["callback_query"]) Тогда 
		callback_query = upd["callback_query"];	
		нДокумент.Дата = ТекущаяДата();
		нДокумент.СообщениеИД = callback_query["message"]["message_id"];
		ЗаписатьКоллекциюВТаблДокументаСообщение(0, callback_query, нДокумент.СодержаниеЗапросаОбратногоВызова);
	КонецЕсли;
	
	нДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат нДокумент.Ссылка;
	
КонецФункции

// Рекурсивно 
Функция ЗаписатьКоллекциюВТаблДокументаСообщение(ИДРодителя, Коллекция, Табл)
	
	ТипКоллекции = ТипЗнч(Коллекция);
	
	н = 0;
	Для Каждого Элемент Из Коллекция Цикл
		 
		нСтрока = Табл.Добавить();
		нСтрока.ИДСтроки = Табл.Количество(); 
		нСтрока.ИДРодителя = ИДРодителя;
		
		Если ТипКоллекции = Тип("Соответствие") Тогда 
			нСтрока.Ключ = Элемент.Ключ;
			Если ЗначениеЯвляетсяКоллекцией(Элемент.Значение) Тогда 
				ЗаписатьКоллекциюВТаблДокументаСообщение(нСтрока.ИДСтроки, Элемент.Значение, Табл)
			Иначе
				нСтрока.Значение = Элемент.Значение;  	
			КонецЕсли;
		ИначеЕсли ТипКоллекции = Тип("Массив") Тогда 
			нСтрока.Ключ = "ЭлементМассива" + н;
			Если ЗначениеЯвляетсяКоллекцией(Элемент) Тогда 
				ЗаписатьКоллекциюВТаблДокументаСообщение(нСтрока.ИДСтроки, Элемент, Табл)
			Иначе
				нСтрока.Значение = Элемент;  	
			КонецЕсли;
		КонецЕсли;	
							
		н = н + 1;
	КонецЦикла;	
	
КонецФункции


Процедура ПроверитьЗагрузитьВложенияВходящегоСообщения(СсылкаДокВхСообщение) Экспорт
	
	//Ставим флаг что сейчас обрабатываем это сообщение
	МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеТребующиеПроверкиЗагрузкиВложений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
	МенеджерЗаписи.ВПроцессеОбработки = Истина;	
	МенеджерЗаписи.Записать();	
	
	УспешноОбработано = Истина;
	
	Попытка 
		Табл = СсылкаДокВхСообщение.СодержаниеСообщения;			
		Если УспешноОбработано И Табл.Найти("photo", "Ключ") <> Неопределено Тогда // Вложена фотография 
		//Фото++
		
			УспешноОбработано = Ложь;
			СтрокаСМаксимальнымРазрешениемФото = Табл.Найти("ЭлементМассива3", "Ключ");
			Если СтрокаСМаксимальнымРазрешениемФото = Неопределено Тогда 
				СтрокаСМаксимальнымРазрешениемФото = Табл.Найти("ЭлементМассива2", "Ключ");
		        Если СтрокаСМаксимальнымРазрешениемФото = Неопределено Тогда 
					СтрокаСМаксимальнымРазрешениемФото = Табл.Найти("ЭлементМассива1", "Ключ");
			    	Если СтрокаСМаксимальнымРазрешениемФото = Неопределено Тогда 
						СтрокаСМаксимальнымРазрешениемФото = Табл.Найти("ЭлементМассива0", "Ключ");			
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаСМаксимальнымРазрешениемФото <> Неопределено Тогда //есть айди фото, получаем ссылку
				СтрокиТабл = Табл.НайтиСтроки(Новый Структура("ИДРодителя, Ключ", СтрокаСМаксимальнымРазрешениемФото.ИДСтроки, "file_id"));	
				Если СтрокиТабл.Количество() = 1 Тогда 
					ИдФото = СтрокиТабл[0].Значение;			
					Сервер = "api.telegram.org";
					Ключ = ПолучитьКлючAPIТелеграмБота();
					Если ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда 
						Прокси = ВебОбщий.ПолучитьПодходящийПрокси("https");
					Иначе
						Прокси = Неопределено;
					КонецЕсли;		 			
					Ресурс = "bot"+Ключ+"/getFile?file_id=" + ИдФото;
					
					Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL);
					Запрос = Новый HTTPЗапрос(Ресурс); 
					Ответ = Соединение.Получить(Запрос);
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
					ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
					ПутьФайла = ОтветСоотв["result"]["file_path"];
					РасширениеФайла = Сред(ПутьФайла,СтрНайти(ПутьФайла, ".", НаправлениеПоиска.СКонца)+1);
					Ресурс = "file/bot"+Ключ+"/" + ПутьФайла;
					Запрос = Новый HTTPЗапрос(Ресурс);
					
					РабочийКаталог = Константы.КаталогФайловРабочий.Получить();
					Подкаталог = РабочийКаталог + "\Telegram\photo"; 
					СоздатьКаталог(Подкаталог);	
					НайденнаяСтрокаСПодписью = Табл.Найти("caption", "Ключ"); 
					Если НайденнаяСтрокаСПодписью = Неопределено Тогда 
						Подпись = "";
					Иначе
						Подпись = НайденнаяСтрокаСПодписью.Значение;	
					КонецЕсли;
					
					ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(Подпись="", "", "_" + Подпись) + "." + РасширениеФайла;

					РезервируемыйФайл = Новый ТекстовыйДокумент();
					Файл = Новый Файл(ПолныйПуть);
					н = 1;
					Пока Файл.Существует() Цикл 
						ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(Подпись="", "", "_" + Подпись) + "_" + н + "." + РасширениеФайла;
	                    Файл = Новый Файл(ПолныйПуть);
						н = н + 1;
					КонецЦикла;
					РезервируемыйФайл.Записать(ПолныйПуть);
					
					Попытка
						Ответ = Соединение.Получить(Ресурс,ПолныйПуть);
						Если Ответ.КодСостояния = 200 Тогда // Успешно 
							МеджерЗаписи = РегистрыСведений.ТелеграмВложенияСообщенийВходящих.СоздатьМенеджерЗаписи();
							МеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
							МеджерЗаписи.ПутьФайлаВТелеграме = ПутьФайла;
							МеджерЗаписи.ДатаЗагрузки = ТекущаяДата(); 
							МеджерЗаписи.Тип = "photo";
							МеджерЗаписи.ПутьКФайлу = ПолныйПуть;
							МеджерЗаписи.Описание = Подпись;
							МеджерЗаписи.Размер = ОтветСоотв["result"]["file_size"];
							МеджерЗаписи.Записать(Истина);																	
							
							УспешноОбработано = Истина;	
						Иначе
							ОписаниеОшибки = "В результате загрузки фотографии из телеграма пришёл ответ не равный 200";
							ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
						КонецЕсли;	
						ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
					Исключение
						ОписаниеОшибки = "Не удалось загрузить фотографию из телеграма. Описание ошибки: " + ОписаниеОшибки();
						ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);
						ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Ложь);
					КонецПопытки;
					
				КонецЕсли;
			КонецЕсли;
			
		//Фото--
		КонецЕсли;
		Если УспешноОбработано И Табл.Найти("video", "Ключ") <> Неопределено Тогда // Вложена видеозапись
		//Видео++
		
			УспешноОбработано = Ложь;
			СтрокиСИДВидео = Табл.НайтиСтроки(Новый Структура("ИДРодителя, Ключ", (Табл.Найти("video", "Ключ").ИДСтроки), "file_id"));
			Если СтрокиСИДВидео.Количество() = 1 Тогда // Если не так значит изменилась структура телеграм, нужно переписать код		
				ИДВидео = СтрокиСИДВидео[0].Значение;			
				Сервер = "api.telegram.org";
				Ключ = ПолучитьКлючAPIТелеграмБота();
				Если ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда 
					Прокси = ВебОбщий.ПолучитьПодходящийПрокси("https");
				Иначе
					Прокси = Неопределено;
				КонецЕсли;		 			
				Ресурс = "bot"+Ключ+"/getFile?file_id=" + ИДВидео;
				
				Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL);
				Запрос = Новый HTTPЗапрос(Ресурс); 
				Ответ = Соединение.Получить(Запрос);
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
				
				ПутьФайла = ОтветСоотв["result"]["file_path"];
				РасширениеФайла = Сред(ПутьФайла,СтрНайти(ПутьФайла, ".", НаправлениеПоиска.СКонца)+1);
				Ресурс = "file/bot"+Ключ+"/" + ПутьФайла;
				Запрос = Новый HTTPЗапрос(Ресурс);
				
				РабочийКаталог = Константы.КаталогФайловРабочий.Получить();
				Подкаталог = РабочийКаталог + "\Telegram\video"; 
				СоздатьКаталог(Подкаталог);	
				НайденнаяСтрокаСПодписью = Табл.Найти("caption", "Ключ"); 
				Если НайденнаяСтрокаСПодписью = Неопределено Тогда 
					Подпись = "";
				Иначе
					Подпись = НайденнаяСтрокаСПодписью.Значение;	
				КонецЕсли;
				
				ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(Подпись="", "", "_" + Подпись) + "." + РасширениеФайла;

				РезервируемыйФайл = Новый ТекстовыйДокумент();
				Файл = Новый Файл(ПолныйПуть);
				н = 1;
				Пока Файл.Существует() Цикл 
					ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(Подпись="", "", "_" + Подпись) + "_" + н + "." + РасширениеФайла;
                    Файл = Новый Файл(ПолныйПуть);
					н = н + 1;
				КонецЦикла;
				РезервируемыйФайл.Записать(ПолныйПуть);
				
				Попытка
					Ответ = Соединение.Получить(Ресурс,ПолныйПуть);
					Если Ответ.КодСостояния = 200 Тогда // Успешно 
						МеджерЗаписи = РегистрыСведений.ТелеграмВложенияСообщенийВходящих.СоздатьМенеджерЗаписи();
						МеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
						МеджерЗаписи.ПутьФайлаВТелеграме = ПутьФайла;
						МеджерЗаписи.ДатаЗагрузки = ТекущаяДата(); 
						МеджерЗаписи.Тип = "video";
						МеджерЗаписи.ПутьКФайлу = ПолныйПуть;
						МеджерЗаписи.Описание = Подпись;
						МеджерЗаписи.Размер = ОтветСоотв["result"]["file_size"];
						МеджерЗаписи.Записать(Истина);																	
						
						УспешноОбработано = Истина;		
					Иначе
						ОписаниеОшибки = "В результате загрузки видеозаписи из телеграма пришёл ответ не равный 200";
						ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
					КонецЕсли;
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
				Исключение
					ОписаниеОшибки = "Не удалось загрузить видеозапись из телеграма. Описание ошибки: " + ОписаниеОшибки();
					ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Ложь);
				КонецПопытки;	
			КонецЕсли;
			
		//Видео--
		КонецЕсли;
		Если УспешноОбработано И Табл.Найти("document", "Ключ") <> Неопределено Тогда // Вложн файл
		//Файл++
		
			УспешноОбработано = Ложь;
			СтрокиСИДФайла = Табл.НайтиСтроки(Новый Структура("ИДРодителя, Ключ", (Табл.Найти("document", "Ключ").ИДСтроки), "file_id"));
			Если СтрокиСИДФайла.Количество() = 1 Тогда // Если не так значит изменилась структура телеграм, нужно переписать код		
				ИДФайла = СтрокиСИДФайла[0].Значение;			
				Сервер = "api.telegram.org";
				Ключ = ПолучитьКлючAPIТелеграмБота();
				Если ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда 
					Прокси = ВебОбщий.ПолучитьПодходящийПрокси("https");
				Иначе
					Прокси = Неопределено;
				КонецЕсли;		 			
				Ресурс = "bot"+Ключ+"/getFile?file_id=" + ИДФайла;
				
				Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL);
				Запрос = Новый HTTPЗапрос(Ресурс); 
				Ответ = Соединение.Получить(Запрос);
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
				
				ПутьФайла = ОтветСоотв["result"]["file_path"];
				Ресурс = "file/bot"+Ключ+"/" + ПутьФайла;
				Запрос = Новый HTTPЗапрос(Ресурс);
				
				РабочийКаталог = Константы.КаталогФайловРабочий.Получить();
				Подкаталог = РабочийКаталог + "\Telegram\document"; 
				СоздатьКаталог(Подкаталог);	
				НайденнаяСтрокаСИменемФайла = Табл.Найти("file_name", "Ключ"); 
				Если НайденнаяСтрокаСИменемФайла = Неопределено Тогда 
					ОписаниеОшибки = "Пришёл файл без поля ""file_name"" " + СсылкаДокВхСообщение;
					ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
					ИмяФайла = "";
				Иначе
					ИмяФайла = НайденнаяСтрокаСИменемФайла.Значение;	
				КонецЕсли;
				
				ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(ИмяФайла="", "", "_" + ИмяФайла);

				РезервируемыйФайл = Новый ТекстовыйДокумент();
				Файл = Новый Файл(ПолныйПуть);
				н = 1;
				Пока Файл.Существует() Цикл 
					Если н = 1 Тогда // этот код нужно выполнять только при первой итерации
						РасширениеФайла = Сред(ПутьФайла,СтрНайти(ПутьФайла, ".", НаправлениеПоиска.СКонца)+1);
						ДлинаРасширения = СтрДлина(РасширениеФайла);
					КонецЕсли;		
					ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(ИмяФайла="", "", "_" + Лев(ИмяФайла, СтрДлина(ИмяФайла)-1)) + "_" + н + "." + РасширениеФайла ;
                    Файл = Новый Файл(ПолныйПуть);
					н = н + 1;
				КонецЦикла;
				РезервируемыйФайл.Записать(ПолныйПуть);
				
				Попытка
					Ответ = Соединение.Получить(Ресурс,ПолныйПуть);
					Если Ответ.КодСостояния = 200 Тогда // Успешно 
						МеджерЗаписи = РегистрыСведений.ТелеграмВложенияСообщенийВходящих.СоздатьМенеджерЗаписи();
						МеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
						МеджерЗаписи.ПутьФайлаВТелеграме = ПутьФайла;
						МеджерЗаписи.ДатаЗагрузки = ТекущаяДата(); 
						МеджерЗаписи.Тип = "document";
						МеджерЗаписи.ПутьКФайлу = ПолныйПуть;
						МеджерЗаписи.Описание = ИмяФайла;
						МеджерЗаписи.Размер = ОтветСоотв["result"]["file_size"];
						МеджерЗаписи.Записать(Истина);																	
						
						УспешноОбработано = Истина;	
					Иначе
						ОписаниеОшибки = "В результате загрузки файла из телеграма пришёл ответ не равный 200";
						ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
					КонецЕсли;	
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
				Исключение
					ОписаниеОшибки = "Не удалось загрузить файл из телеграма. Описание ошибки: " + ОписаниеОшибки();
					ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Ложь);
				КонецПопытки;	
			КонецЕсли;
			
		//Файл--
		КонецЕсли;
		Если УспешноОбработано И Табл.Найти("audio", "Ключ") <> Неопределено Тогда // Вложена видеозапись
		//Аудио++
		
			УспешноОбработано = Ложь;
			СтрокиСИДАудио = Табл.НайтиСтроки(Новый Структура("ИДРодителя, Ключ", (Табл.Найти("audio", "Ключ").ИДСтроки), "file_id"));
			Если СтрокиСИДАудио.Количество() = 1 Тогда // Если не так значит изменилась структура телеграм, нужно переписать код		
				ИДАудио = СтрокиСИДАудио[0].Значение;			
				Сервер = "api.telegram.org";
				Ключ = ПолучитьКлючAPIТелеграмБота();
				Если ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда 
					Прокси = ВебОбщий.ПолучитьПодходящийПрокси("https");
				Иначе
					Прокси = Неопределено;
				КонецЕсли;		 			
				Ресурс = "bot"+Ключ+"/getFile?file_id=" + ИДАудио;
				
				Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL);
				Запрос = Новый HTTPЗапрос(Ресурс); 
				Ответ = Соединение.Получить(Запрос);
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
				
				ПутьФайла = ОтветСоотв["result"]["file_path"];
				РасширениеФайла = Сред(ПутьФайла,СтрНайти(ПутьФайла, ".", НаправлениеПоиска.СКонца)+1);
				Ресурс = "file/bot"+Ключ+"/" + ПутьФайла;
				Запрос = Новый HTTPЗапрос(Ресурс);
				
				РабочийКаталог = Константы.КаталогФайловРабочий.Получить();
				Подкаталог = РабочийКаталог + "\Telegram\audio"; 
				СоздатьКаталог(Подкаталог);	
				НайденнаяСтрокаСНазванием = Табл.Найти("title", "Ключ"); 
				Если НайденнаяСтрокаСНазванием = Неопределено Тогда 
					Название = "";
				Иначе
					Название = НайденнаяСтрокаСНазванием.Значение;	
				КонецЕсли;
				
				ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(Название="", "", "_" + Название) + "." + РасширениеФайла;

				РезервируемыйФайл = Новый ТекстовыйДокумент();
				Файл = Новый Файл(ПолныйПуть);
				н = 1;
				Пока Файл.Существует() Цикл 
					ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(Название="", "", "_" + Название) + "_" + н + "." + РасширениеФайла;
                    Файл = Новый Файл(ПолныйПуть);
					н = н + 1;
				КонецЦикла;
				РезервируемыйФайл.Записать(ПолныйПуть);
				
				Попытка
					Ответ = Соединение.Получить(Ресурс,ПолныйПуть);
					Если Ответ.КодСостояния = 200 Тогда // Успешно 
						МеджерЗаписи = РегистрыСведений.ТелеграмВложенияСообщенийВходящих.СоздатьМенеджерЗаписи();
						МеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
						МеджерЗаписи.ПутьФайлаВТелеграме = ПутьФайла;
						МеджерЗаписи.ДатаЗагрузки = ТекущаяДата(); 
						МеджерЗаписи.Тип = "audio";
						МеджерЗаписи.ПутьКФайлу = ПолныйПуть;
						МеджерЗаписи.Описание = Название;
						МеджерЗаписи.Размер = ОтветСоотв["result"]["file_size"];
						МеджерЗаписи.Записать(Истина);																	
						
						УспешноОбработано = Истина;		
					Иначе
						ОписаниеОшибки = "В результате загрузки аудиофайла из телеграма пришёл ответ не равный 200";
						ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
					КонецЕсли;	
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
				Исключение
					ОписаниеОшибки = "Не удалось загрузить аудиофайл из телеграма. Описание ошибки: " + ОписаниеОшибки();
					ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Ложь);
				КонецПопытки;	
			КонецЕсли;
			
		//Аудио--
		КонецЕсли;
		Если УспешноОбработано И Табл.Найти("voice", "Ключ") <> Неопределено Тогда // Вложена видеозапись
		//Звукозапись++
		
			УспешноОбработано = Ложь;
			СтрокиСИДЗвукозаписи = Табл.НайтиСтроки(Новый Структура("ИДРодителя, Ключ", (Табл.Найти("voice", "Ключ").ИДСтроки), "file_id"));
			Если СтрокиСИДЗвукозаписи.Количество() = 1 Тогда // Если не так значит изменилась структура телеграм, нужно переписать код		
				ИДЗвукозаписи = СтрокиСИДЗвукозаписи[0].Значение;			
				Сервер = "api.telegram.org";
				Ключ = ПолучитьКлючAPIТелеграмБота();
				Если ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда 
					Прокси = ВебОбщий.ПолучитьПодходящийПрокси("https");
				Иначе
					Прокси = Неопределено;
				КонецЕсли;		 			
				Ресурс = "bot"+Ключ+"/getFile?file_id=" + ИДЗвукозаписи;
				
				Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL);
				Запрос = Новый HTTPЗапрос(Ресурс); 
				Ответ = Соединение.Получить(Запрос);
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
				
				ПутьФайла = ОтветСоотв["result"]["file_path"];
				РасширениеФайла = Сред(ПутьФайла,СтрНайти(ПутьФайла, ".", НаправлениеПоиска.СКонца)+1);
				Ресурс = "file/bot"+Ключ+"/" + ПутьФайла;
				Запрос = Новый HTTPЗапрос(Ресурс);
				
				РабочийКаталог = Константы.КаталогФайловРабочий.Получить();
				Подкаталог = РабочийКаталог + "\Telegram\voice"; 
				СоздатьКаталог(Подкаталог);	
															
				ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + "Звукозапись." + РасширениеФайла;

				РезервируемыйФайл = Новый ТекстовыйДокумент();
				Файл = Новый Файл(ПолныйПуть);
				н = 1;
				Пока Файл.Существует() Цикл 
					ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + "Звукозапись_" + н + "." + РасширениеФайла;
                    Файл = Новый Файл(ПолныйПуть);
					н = н + 1;
				КонецЦикла;
				РезервируемыйФайл.Записать(ПолныйПуть);
				
				Попытка
					Ответ = Соединение.Получить(Ресурс,ПолныйПуть);
					Если Ответ.КодСостояния = 200 Тогда // Успешно 
						МеджерЗаписи = РегистрыСведений.ТелеграмВложенияСообщенийВходящих.СоздатьМенеджерЗаписи();
						МеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
						МеджерЗаписи.ПутьФайлаВТелеграме = ПутьФайла;
						МеджерЗаписи.ДатаЗагрузки = ТекущаяДата(); 
						МеджерЗаписи.Тип = "voice";
						МеджерЗаписи.ПутьКФайлу = ПолныйПуть;
						МеджерЗаписи.Описание = "";
						МеджерЗаписи.Размер = ОтветСоотв["result"]["file_size"];
						МеджерЗаписи.Записать(Истина);																	
						
						УспешноОбработано = Истина;		
					Иначе
						ОписаниеОшибки = "В результате загрузки файла звукозаписи из телеграма пришёл ответ не равный 200";
						ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
					КонецЕсли;	
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
				Исключение
					ОписаниеОшибки = "Не удалось загрузить файл звукозаписи из телеграма. Описание ошибки: " + ОписаниеОшибки();
					ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Ложь);
				КонецПопытки;	
			КонецЕсли;
			
		//Звукозапись--
		КонецЕсли;
		Если УспешноОбработано И Табл.Найти("sticker", "Ключ") <> Неопределено Тогда // Вложена видеозапись
		//Стикер++
		
		    УспешноОбработано = Ложь;
			СтрокиСИДСтикера = Табл.НайтиСтроки(Новый Структура("ИДРодителя, Ключ", (Табл.Найти("sticker", "Ключ").ИДСтроки), "file_id"));
			Если СтрокиСИДСтикера.Количество() = 1 Тогда // Если не так значит изменилась структура телеграм, нужно переписать код		
				ИДСтикера = СтрокиСИДСтикера[0].Значение;			
				Сервер = "api.telegram.org";
				Ключ = ПолучитьКлючAPIТелеграмБота();
				Если ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда 
					Прокси = ВебОбщий.ПолучитьПодходящийПрокси("https");
				Иначе
					Прокси = Неопределено;
				КонецЕсли;		 			
				Ресурс = "bot"+Ключ+"/getFile?file_id=" + ИДСтикера;
				
				Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL);
				Запрос = Новый HTTPЗапрос(Ресурс); 
				Ответ = Соединение.Получить(Запрос);
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
				
				ПутьФайла = ОтветСоотв["result"]["file_path"];
				РасширениеФайла = Сред(ПутьФайла,СтрНайти(ПутьФайла, ".", НаправлениеПоиска.СКонца)+1);
				Ресурс = "file/bot"+Ключ+"/" + ПутьФайла;
				Запрос = Новый HTTPЗапрос(Ресурс);
				
				РабочийКаталог = Константы.КаталогФайловРабочий.Получить();
				Подкаталог = РабочийКаталог + "\Telegram\sticker"; 
				СоздатьКаталог(Подкаталог);	
				НайденнаяСтрокаСПодписью = Табл.Найти("set_name", "Ключ"); 
				Если НайденнаяСтрокаСПодписью = Неопределено Тогда 
					Подпись = "";
				Иначе
					Подпись = НайденнаяСтрокаСПодписью.Значение;	
				КонецЕсли;
				
				ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(Подпись="", "", "_" + Подпись) + "." + РасширениеФайла;

				РезервируемыйФайл = Новый ТекстовыйДокумент();
				Файл = Новый Файл(ПолныйПуть);
				н = 1;
				Пока Файл.Существует() Цикл 
					ПолныйПуть = Подкаталог + "\" + Формат(СсылкаДокВхСообщение.Дата, "ДФ=yyyy-MM-dd-ЧЧ-мм-сс") + ?(Подпись="", "", "_" + Подпись) + "_" + н + "." + РасширениеФайла;
                    Файл = Новый Файл(ПолныйПуть);
					н = н + 1;
				КонецЦикла;
				РезервируемыйФайл.Записать(ПолныйПуть);
				
				Попытка
					Ответ = Соединение.Получить(Ресурс,ПолныйПуть);
					Если Ответ.КодСостояния = 200 Тогда // Успешно 
						МеджерЗаписи = РегистрыСведений.ТелеграмВложенияСообщенийВходящих.СоздатьМенеджерЗаписи();
						МеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
						МеджерЗаписи.ПутьФайлаВТелеграме = ПутьФайла; 
						МеджерЗаписи.ДатаЗагрузки = ТекущаяДата(); 
						МеджерЗаписи.Тип = "sticker";
						МеджерЗаписи.ПутьКФайлу = ПолныйПуть;
						МеджерЗаписи.Описание = Подпись;
						МеджерЗаписи.Размер = ОтветСоотв["result"]["file_size"];
						МеджерЗаписи.Записать(Истина);																	
						
						УспешноОбработано = Истина;		
					Иначе
						ОписаниеОшибки = "В результате загрузки стикера из телеграма пришёл ответ не равный 200";
						ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);	
					КонецЕсли;	
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
				Исключение
					ОписаниеОшибки = "Не удалось загрузить стикер из телеграма. Описание ошибки: " + ОписаниеОшибки();
					ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);
					ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Ложь);
				КонецПопытки;	
			КонецЕсли;
			
		//Стикер--
		КонецЕсли;
		//Если
		    //Можно дописать обработку других вложений
		//КонецЕсли;
		Если УспешноОбработано И Табл.Найти("text", "Ключ") <> Неопределено Тогда // Вложен текст
			УспешноОбработано = Ложь;
			УспешноОбработано = Истина; // нечего обрабатывать	
		КонецЕсли;
	Исключение
		// не ставим ошибку обработки. Если она произошла до сохранения файла флаг УспешноОбработано и так будет ложь
		ОписаниеОшибки = "Ошибка при обработке вложения (Вложение было успешно загружено). Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("ТелеграмМодуль", "ПроверитьЗагрузитьВложенияВходящегоСообщения", ОписаниеОшибки);						
	КонецПопытки;
	
	Если УспешноОбработано Тогда 
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеТребующиеПроверкиЗагрузкиВложений.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();	
		
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
		МенеджерЗаписи.Записать(Истина);
		
		ОбработатьВходящееСообщение(СсылкаДокВхСообщение);
	Иначе
		//Снимаем флаг если не удалось успешно обработать
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеТребующиеПроверкиЗагрузкиВложений.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
		МенеджерЗаписи.ВПроцессеОбработки = Ложь;	
		МенеджерЗаписи.Записать();	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработатьВходящееСообщение(СсылкаДокВхСообщение) Экспорт
	
	//Ставим флаг что сейчас обрабатываем это сообщение
	МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
	МенеджерЗаписи.ВПроцессеОбработки = Истина;	
	МенеджерЗаписи.Записать();		
	УспешноОбработано = Ложь;

	//Проверим есть ли право у контакта на обработку сообщений
	ТелеграмКонтакт = Справочники.ТелеграмКонтакты.НайтиПоРеквизиту("ИД", СсылкаДокВхСообщение.ТелеграмКонтакт.ИД);
	Если ТелеграмКонтакт.ДоступОбработкаСообщений = Истина Тогда // если контакта не существует тогда будет пустая ссылка с пустой галочкой
		
		//1. Сначала проверим с совпадением Шаблонов из параметров
		УспешноОбработано = ОбработкаСообщенияПоШаблонамТелеграмПараметров(СсылкаДокВхСообщение);
		
		//2. Если Активирована обработка ИИ то передадим управление ей
		Если НЕ УспешноОбработано Тогда  
			УспешноОбработано = ОбработкаСообщенияОбработкамиИИ(СсылкаДокВхСообщение)	
		КонецЕсли;
		
		//3. Обработка по полному соответствию чёткому шаблону
		Если НЕ УспешноОбработано Тогда  
			УспешноОбработано = Справочники.ТелеграмОбработкаЧёткиеШаблоныСообщений.ОбработатьТекстПоЧёткомуСовпадениюВсегоСообщенияСШаблоном(СсылкаДокВхСообщение);
		КонецЕсли;
		
		
	Иначе
		УспешноОбработано = Истина; //Обработку контакта без права обработки закрываем ничего не делая	
	КонецЕсли;
	
	Если УспешноОбработано Тогда 
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();	
	Иначе
		//Снимаем флаг если не удалось успешно обработать
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияВходящиеПроверенныеЗагруженныеНеОбработанные.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сообщение = СсылкаДокВхСообщение;
		МенеджерЗаписи.ВПроцессеОбработки = Ложь;	
		МенеджерЗаписи.Записать();	
	КонецЕсли;	
	
КонецПроцедуры

Функция ОбработкаСообщенияОбработкамиИИ(СсылкаДокВхСообщение)
	
	УспешноОбработано = Ложь;

	ТекущиеДанныеИИ = РегистрыСведений.ТелеграмОбработкаСообщенийИИАктивные.Получить(Новый Структура("ТелеграмКонтакт", СсылкаДокВхСообщение.ТелеграмКонтакт));
	Если ЗначениеЗаполнено(ТекущиеДанныеИИ.НазваниеПроцедуры) Тогда // есть активная ИИ обработка	
		Попытка		
			Если ТипЗнч(ТекущиеДанныеИИ.РасположениеПроцедуры) = Тип("Строка") Тогда
				Если СтрНайти(СокрЛ(ТекущиеДанныеИИ.РасположениеПроцедуры), "Обработки") = 1 Тогда // Это встроенная обработка
					КодВыполнения = "Обработка = " + СокрЛП(ТекущиеДанныеИИ.РасположениеПроцедуры) + ".Создать();
					|Обработка." + СокрЛП(ТекущиеДанныеИИ.НазваниеПроцедуры) + "(СсылкаДокВхСообщение);";				
				Иначе // Считаем что это общий модуль
					КодВыполнения = СокрЛП(ТекущиеДанныеИИ.РасположениеПроцедуры) + "." 
					+ СокрЛП(ТекущиеДанныеИИ.НазваниеПроцедуры) + "(СсылкаДокВхСообщение);";						
				КонецЕсли;				
			ИначеЕсли ТипЗнч(ТекущиеДанныеИИ.РасположениеПроцедуры) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
					
				ДвоичныеДанныеФайла = ТекущиеДанныеИИ.РасположениеПроцедуры.ФайлОбработки.Получить();
				ИмяОбработки = ПолучитьИмяВременногоФайла("epf");
				ДвоичныеДанныеФайла.Записать(ИмяОбработки);
				ОбъектОписанияЗащиты = новый ОписаниеЗащитыОтОпасныхДействий;
				ОбъектОписанияЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяОбработки, Ложь, ОбъектОписанияЗащиты);
				
				КодВыполнения = "Обработка = ВнешняяОбработка;
				|Обработка." + СокрЛП(ТекущиеДанныеИИ.НазваниеПроцедуры) + "(СсылкаДокВхСообщение);";
			КонецЕсли;
			
			Выполнить(КодВыполнения);
			
		Исключение
			ОписаниеОшибки = "В обработке ИИ произошла ошибка. """ + Строка(ТекущиеДанныеИИ.РасположениеПроцедуры) 
			+ "." + Строка(ТекущиеДанныеИИ.НазваниеПроцедуры) + """ Ошибка: " + ОписаниеОшибки();
			ЗаписьВЖурналОшибок("ТелеграмМодуль", "ОбработкаСообщенияОбработкамиИИ", ОписаниеОшибки);		
		КонецПопытки;
		
		//После обработки ИИ не формируем исходящее сообщение, они должны быть сформированны и отправлены в обработке ИИ
		//Если ИИ подключена то считаем любой результат (в том числе и сбой на какомто этапе) успешной обработкой
		УспешноОбработано = Истина;
	КонецЕсли;
	
	Возврат УспешноОбработано; 
	
КонецФункции

Функция ОбработкаСообщенияПоШаблонамТелеграмПараметров(СсылкаДокВхСообщение)
	
	УспешноОбработано = Ложь;
	
	ПозицияАдресаБота = СтрНайти(СсылкаДокВхСообщение.Текст, ПолучитьАдресТелеграмБота());
	Если ПозицияАдресаБота > 0 Тогда
		ТекстСообщения = Лев(СсылкаДокВхСообщение.Текст, ПозицияАдресаБота-1);
	Иначе
		ТекстСообщения = СсылкаДокВхСообщение.Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолучитьШаблонСозданияИОткрытияГруппыСообщенийТелеграмБота())
	И НРег(ТекстСообщения) = НРег(ПолучитьШаблонСозданияИОткрытияГруппыСообщенийТелеграмБота()) Тогда 
	
		//Создаём группу
		нГруппа = Документы.ТелеграмГруппыСообщений.СоздатьДокумент();
		нГруппа.Дата = СсылкаДокВхСообщение.Дата; 
		нГруппа.ТелеграмКонтакт = СсылкаДокВхСообщение.ТелеграмКонтакт;
		нГруппа.Записать(РежимЗаписиДокумента.Проведение);
		
		//Открываем группу
		МенеджерЗаписи = РегистрыСведений.ТелеграмГруппыСообщенийСостояние.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТелеграмГруппаСообщений = нГруппа.Ссылка;
		МенеджерЗаписи.Открыта = Истина;
		МенеджерЗаписи.Период = СсылкаДокВхСообщение.Дата;
		МенеджерЗаписи.Записать(Истина);
				
		ОтветТекст = "Создана и открыта группа №" + Формат(нГруппа.Номер, "ЧГ=0"); 
		
		УспешноОбработано = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ПолучитьШаблонЗакрытияТекущейГруппыСообщенийТелеграмБота())
	И НРег(ТекстСообщения) = НРег(ПолучитьШаблонЗакрытияТекущейГруппыСообщенийТелеграмБота()) Тогда 
	
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ТелеграмГруппыСообщенийСостояниеСрезПоследних.ТелеграмГруппаСообщений
		               |ИЗ
		               |	РегистрСведений.ТелеграмГруппыСообщенийСостояние.СрезПоследних(&Период, ТелеграмГруппаСообщений.ТелеграмКонтакт = &ТелеграмКонтакт) КАК ТелеграмГруппыСообщенийСостояниеСрезПоследних
		               |ГДЕ
		               |	ТелеграмГруппыСообщенийСостояниеСрезПоследних.Открыта
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТелеграмГруппыСообщенийСостояниеСрезПоследних.Период УБЫВ";
		Запрос.УстановитьПараметр("Период", СсылкаДокВхСообщение.Дата);
		Запрос.УстановитьПараметр("ТелеграмКонтакт", СсылкаДокВхСообщение.ТелеграмКонтакт);
		Результат = Запрос.Выполнить();	
		
		Если Результат.Пустой() Тогда
			ОтветТекст = "Нет открытых групп";
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			//Закрываем группу
			МенеджерЗаписи = РегистрыСведений.ТелеграмГруппыСообщенийСостояние.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТелеграмГруппаСообщений = Выборка.ТелеграмГруппаСообщений;
			МенеджерЗаписи.Открыта = Ложь;
			МенеджерЗаписи.Период = СсылкаДокВхСообщение.Дата;
			МенеджерЗаписи.Записать(Истина);

			ОтветТекст = "Группа №" + Формат(Выборка.ТелеграмГруппаСообщений.Номер, "ЧГ=0") + " закрыта";
		КонецЕсли;	
		
		УспешноОбработано = Истина;
			
	ИначеЕсли ЗначениеЗаполнено(ПолучитьШаблонДеактивацииТекущегоИИТелеграмБота())
	И НРег(ТекстСообщения) = НРег(ПолучитьШаблонДеактивацииТекущегоИИТелеграмБота()) Тогда 
	
		МенеджерЗаписи = РегистрыСведений.ТелеграмОбработкаСообщенийИИАктивные.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТелеграмКонтакт = СсылкаДокВхСообщение.ТелеграмКонтакт;
		МенеджерЗаписи.Прочитать();
		Если (Не ЗначениеЗаполнено(МенеджерЗаписи.РасположениеПроцедуры)) И (Не ЗначениеЗаполнено(МенеджерЗаписи.НазваниеПроцедуры)) Тогда // ИИ не был включён
			ОтветТекст = "Активного ИИ нет";
		Иначе
			ОтветТекст = "ИИ """ + Строка(МенеджерЗаписи.РасположениеПроцедуры) + "." 
			+ Строка(МенеджерЗаписи.НазваниеПроцедуры) + """ был деактивирован";
		КонецЕсли;
		МенеджерЗаписи.Удалить();

		УспешноОбработано = Истина;
		
	КонецЕсли;
	
	
	// Создаём исходящее сообщение
	Если ЗначениеЗаполнено(ОтветТекст) Тогда
		СтруктураОтвета = Новый Структура();
		СтруктураОтвета.Вставить("ТелеграмКонтакт", СсылкаДокВхСообщение.ТелеграмКонтакт); 
		СтруктураОтвета.Вставить("Текст", ОтветТекст);
		
		СоздатьИОтправитьДокСообщениеИсходящие(СтруктураОтвета);	
	КонецЕсли;
	
	Возврат УспешноОбработано;
	
КонецФункции


//СоздатьИОтправитьДокСообщениеИсходящие
// Возвращет ссылку на созданнный документ 
//СтруктураСообщения - Структура с параметрами
//В структуре обязательно должен быть "ТелеграмКонтакт" ссылка на справочник ТелеграмКонтакты
//В структуре могут быть параметры:
//ИДРедактируемогоСообщения - Число, если параметр есть значит будет отредактированно предыдущее, если нет - отправлено новое
//Текст - Строка, текст сообщения
//Клавиатура - Массив с массивами структур (каждый вложенный массив это строка, каждая структура в нём это кнопка
// каждая структура должна содержать 2 параметра text - имя кнопки и callback_data - возвращаемая при нажатии информация 
//ФайлПуть - Строка, полное имя файла фотографии
//ФайлТип - Строка типа файла, если не указано то попытается определить автоматически если не получится то отправится как document
//ФайлОписание - Строка, описание фотографии
Функция СоздатьИОтправитьДокСообщениеИсходящие(СтруктураСообщения) Экспорт
	
	Если СтруктураСообщения.Свойство("Текст") Тогда 
		КолИтераций = Окр((СтрДлина(СтруктураСообщения.Текст) / 4050) + 0.5);
	Иначе
		КолИтераций = 1;
	КонецЕсли;

	ТекИтерация = 1;
	Пока ТекИтерация <= КолИтераций Цикл
		нДок = Документы.ТелеграмСообщенияИсходящие.СоздатьДокумент();
		нДок.ТелеграмКонтакт = СтруктураСообщения.ТелеграмКонтакт; 
		
		//ИДРедактируемогоСообщения++
		Если СтруктураСообщения.Свойство("ИДРедактируемогоСообщения") Тогда
			нДок.ИДРедактируемогоСообщения = СтруктураСообщения.ИДРедактируемогоСообщения;	
		КонецЕсли;
		//ИДРедактируемогоСообщения--
			
		//Текст++
		Если СтруктураСообщения.Свойство("Текст") Тогда 
			нДок.Текст = Сред(СтруктураСообщения.Текст, ((ТекИтерация-1)*4050+1), 4050);
		КонецЕсли;
		//Текст--		
		
		//Клавиатура++
		Если СтруктураСообщения.Свойство("Клавиатура") Тогда 
			нДок.Клавиатура = ЗначениеВСтрокуВнутр(СтруктураСообщения.Клавиатура);
		КонецЕсли;
		//Клавиатура--
		
		//Файл++	
		Если СтруктураСообщения.Свойство("ФайлПуть") Тогда 
			нСтрокаВл = нДок.Вложения.Добавить();
			нСтрокаВл.ПутьКФайлу = СтруктураСообщения.ФайлПуть;
			Если СтруктураСообщения.Свойство("ФайлТип") Тогда 
				нСтрокаВл.Тип = СтруктураСообщения.ФайлТип;
			Иначе
				нСтрокаВл.Тип = ТипФайлаДляТелеграм(Сред(СтруктураСообщения.ФайлПуть,СтрНайти(СтруктураСообщения.ФайлПуть, ".", НаправлениеПоиска.СКонца)+1)); 
			КонецЕсли;
			Если СтруктураСообщения.Свойство("ФайлОписание") Тогда 
				нСтрокаВл.Описание = СтруктураСообщения.ФайлОписание;	
			КонецЕсли;
		КонецЕсли;
		//Файл--
		
		нДок.Дата = ТекущаяДата();
		нДок.Записать(РежимЗаписиДокумента.Проведение);
		
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияИсходящиеКОтправке.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сообщение = нДок.Ссылка;
		МенеджерЗаписи.Записать(Истина);
		
		//Запускаем отправку в фоне и завершаем текущий стёк, т.к. неудачная отправка <> неудачная обработка
		мПараметры = Новый Массив();
		мПараметры.Добавить(нДок.Ссылка);
		ОбщегоНазначения.ВыполнитьПроцедуруФункциюВФонеНаСервере("ТелеграмМодуль.ОтправитьСообщениеИсходящие",мПараметры);
		
		ТекИтерация = ТекИтерация + 1;
	КонецЦикла;
	
	// В случае когда отправляется несколько сообщений возвращается ссылка на последнее
	Возврат нДок.Ссылка;
	
КонецФункции


Процедура ОтправитьСообщениеИсходящие(СсылкаДокИсхСообщение) Экспорт

	//Ставим флаг что сейчас обрабатываем это сообщение
	МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияИсходящиеКОтправке.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сообщение = СсылкаДокИсхСообщение;
	МенеджерЗаписи.ВПроцессеОбработки = Истина;	
	МенеджерЗаписи.Записать();	
	
	УспешноОтправлено = Ложь;

	
	Ключ = ПолучитьКлючAPIТелеграмБота();
	Сервер = "api.telegram.org";
	Если ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда 
		Прокси = ВебОбщий.ПолучитьПодходящийПрокси("https");
	Иначе
		Прокси = Неопределено;
	КонецЕсли;

	Попытка 
		Если ЗначениеЗаполнено(СсылкаДокИсхСообщение.Текст) Тогда // отправляем как текстовое сообщение 
		//Текст++
		
			Если СсылкаДокИсхСообщение.ИДРедактируемогоСообщения = 0 Тогда // Это отправка нового сообщения
	 			Команда = "sendMessage";
				Ресурс = "bot"+Ключ+"/"+Команда+"?chat_id="+Формат(СсылкаДокИсхСообщение.ТелеграмКонтакт.ИД,"ЧГ=") + "&text="+СокрЛП(СсылкаДокИсхСообщение.Текст); 	
			Иначе // Это редактирование предыдущего сообщения
	 			Команда = "editMessageText";
				Ресурс = "bot"+Ключ+"/"+Команда+"?chat_id="+Формат(СсылкаДокИсхСообщение.ТелеграмКонтакт.ИД,"ЧГ=") + "&message_id=" + Формат(СсылкаДокИсхСообщение.ИДРедактируемогоСообщения,"ЧГ=") + "&text="+СокрЛП(СсылкаДокИсхСообщение.Текст); 
			КонецЕсли;
		
			 			
			Если ЗначениеЗаполнено(СсылкаДокИсхСообщение.Клавиатура) Тогда // добавляем клавиатуру
				
				Попытка
					МассивСоСтрокамиКнопок = ЗначениеИзСтрокиВнутр(СсылкаДокИсхСообщение.Клавиатура);
				Исключение
					ОписаниеОшибки = "Не удалось сформировать клавиатуру из строки. " + СсылкаДокИсхСообщение;
					ЗаписьВЖурналОшибок("ТелеграмМодуль", "ОтправитьСообщениеИсходящие", ОписаниеОшибки);
				КонецПопытки;
				
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();  
				ЗаписатьJSON(ЗаписьJSON, Новый Структура("inline_keyboard", МассивСоСтрокамиКнопок));
				Клавиатура = ЗаписьJSON.Закрыть();
			 
				Ресурс = Ресурс + "&reply_markup=" + Клавиатура;
			КонецЕсли;
			
			Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL);
			Запрос = Новый HTTPЗапрос(Ресурс); 
			
			Ответ = Соединение.Получить(Запрос);
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			
			ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
			ok = ОтветСоотв["ok"] ;
			
			Если ok = Истина Тогда
				УспешноОтправлено = Истина;
				СообщениеИД = ОтветСоотв["result"]["message_id"];
			Иначе
				Если СсылкаДокИсхСообщение.ИДРедактируемогоСообщения <> 0 И ОтветСоотв["description"] = "Bad Request: message is not modified" Тогда // Если это была корректрировка пред. сообщения и она не удалась	
					УспешноОтправлено = Истина; // по причине полного совпадения с предыдущем (редактируемым) сообщением то считаем что операция выполнена успешно т.к. в чате находится такая же информация как и этом сообщении	
				Иначе
					УспешноОтправлено = Ложь;	
				КонецЕсли;
				СообщениеИД = 0;
			КонецЕсли;
			ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
			
		//Текст--
		ИначеЕсли СсылкаДокИсхСообщение.Вложения.Количество() > 0 Тогда //Отправляем как файл
		//Вложения++
			Вложение = СсылкаДокИсхСообщение.Вложения[0];
			Если Вложение.Тип = "photo" Тогда //Отправляем как фотографию
			//Фото++
			
				Если СсылкаДокИсхСообщение.ИДРедактируемогоСообщения = 0 Тогда // Это отправка нового сообщения
		 			Команда = "sendPhoto";
					Ресурс = "bot" + Ключ + "/" + Команда;
				Иначе // Это редактирование предыдущего сообщения
		 			Команда = "editMessageMedia";
					Ресурс = "bot" + Ключ + "/" + Команда;
				КонецЕсли;

					                
                МассивФайловДляОбъединения = Новый Массив(); 
				
                ГУИД = "----" + Строка(Новый УникальныйИдентификатор()); 
                 
                //Часть1++
                ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt"); 
                ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8);
                ТекстДляОтправки = "";
				// ТелеграмКонтакт
                ТекстДляОтправки = ТекстДляОтправки + "--" + ГУИД + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""chat_id"""+ Символы.ПС + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + СокрЛП(Формат(СсылкаДокИсхСообщение.ТелеграмКонтакт.ИД,"ЧГ=0")) + Символы.ПС;
				Если СсылкаДокИсхСообщение.ИДРедактируемогоСообщения <> 0 Тогда
					// ИД редактируемого сообщения
	                ТекстДляОтправки = ТекстДляОтправки + "--" + ГУИД + Символы.ПС;    
	                ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""message_id"""+ Символы.ПС + Символы.ПС;    
	                ТекстДляОтправки = ТекстДляОтправки + СокрЛП(Формат(СсылкаДокИсхСообщение.ИДРедактируемогоСообщения,"ЧГ=0")) + Символы.ПС;				
					//InputMediaPhoto
					ОписаниеФотографии = СокрЛП(Вложение.Описание);
					ТекстДляОтправки = ТекстДляОтправки + "--" + ГУИД + Символы.ПС;    
	                ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""media""" + Символы.ПС + Символы.ПС;
					InputMediaPhoto = "{ 
										|""type"": ""photo"",
										|""media"":""attach://photo"""
										+ ?(ЗначениеЗаполнено(ОписаниеФотографии), Символы.ПС + """caption"": """ + ОписаниеФотографии + """", "") + " 
										|}";		
	                ТекстДляОтправки = ТекстДляОтправки + InputMediaPhoto + Символы.ПС; 
					
				Иначе
					//Описание
                	ТекстДляОтправки = ТекстДляОтправки + "--" + ГУИД + Символы.ПС;    
                	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""caption""" + Символы.ПС + Символы.ПС;    
                	ТекстДляОтправки = ТекстДляОтправки + СокрЛП(Вложение.Описание) + Символы.ПС;  	
				КонецЕсли;
				                                                         
                // Фотография
                ТекстДляОтправки = ТекстДляОтправки + "--" +  ГУИД + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""photo""; filename=""" + Вложение.ПутьКФайлу + """" + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + "Content-Type: image/jpg" + Символы.ПС;
				ФайлОтправкиНачало.ЗаписатьСтроку(ТекстДляОтправки);
                ФайлОтправкиНачало.Закрыть(); 
				МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
				//Часть1--

                //Часть2++
                МассивФайловДляОбъединения.Добавить(Вложение.ПутьКФайлу); 
				//Часть2--

				//Часть3++
				ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
                ФайлаОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8);
                ТекстДляОтправки = "";
                ТекстДляОтправки = ТекстДляОтправки + Символы.ПС  + "--" +  ГУИД +"--";
                ФайлаОтправкиКонец.ЗаписатьСтроку(ТекстДляОтправки);
                ФайлаОтправкиКонец.Закрыть(); 
                МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); 
                //Часть3--

                ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt"); 
                ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
                
                //Отправка
	            Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL); 
				Запрос = Новый HTTPЗапрос(Ресурс);
                Запрос.Заголовки.Вставить("Connection", "keep-alive"); 
                Запрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + ГУИД); 
                Запрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);    
                
				Ответ = Соединение.ОтправитьДляОбработки(Запрос);
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				
				ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
				ok = ОтветСоотв["ok"] ;

				
				Если ok = Истина Тогда
					УспешноОтправлено = Истина;
					СообщениеИД = ОтветСоотв["result"]["message_id"];
				Иначе
					Если СсылкаДокИсхСообщение.ИДРедактируемогоСообщения <> 0 И ОтветСоотв["description"] = "Bad Request: message is not modified" Тогда // Если это была корректрировка пред. сообщения и она не удалась	
						УспешноОтправлено = Истина; // по причине полного совпадения с предыдущем (редактируемым) сообщением то считаем что операция выполнена успешно т.к. в чате находится такая же информация как и этом сообщении	
					Иначе
						УспешноОтправлено = Ложь;	
					КонецЕсли; 
					
					СообщениеИД = 0;
				КонецЕсли;
				ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
			//Фото--
			ИначеЕсли Вложение.Тип = "document" Тогда //Отправляем как файл
			//Файл++
			
				Команда = "sendDocument";
				Ресурс = "bot" + Ключ + "/" + Команда;
	                
                МассивФайловДляОбъединения = Новый Массив(); 
                ГУИД = "----" + Строка(Новый УникальныйИдентификатор()); 

                 
                //Часть1++
                ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt"); 
                ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8);
                ТекстДляОтправки = "";
                 // ТелеграмКонтакт
                ТекстДляОтправки = ТекстДляОтправки + "--" + ГУИД + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""chat_id"""+ Символы.ПС + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + СокрЛП(Формат(СсылкаДокИсхСообщение.ТелеграмКонтакт.ИД,"ЧГ=0")) + Символы.ПС;
				//Описание
                ТекстДляОтправки = ТекстДляОтправки + "--" + ГУИД + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""caption""" + Символы.ПС + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + СокрЛП(Вложение.Описание) + Символы.ПС;                                                           
                // Файл
                ТекстДляОтправки = ТекстДляОтправки + "--" +  ГУИД + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""document""; filename=""" + Вложение.ПутьКФайлу + """" + Символы.ПС;    
                ТекстДляОтправки = ТекстДляОтправки + "Content-Type: application/octet-stream" + Символы.ПС;
				ФайлОтправкиНачало.ЗаписатьСтроку(ТекстДляОтправки);
                ФайлОтправкиНачало.Закрыть(); 
				МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
				//Часть1--

                //Часть2++
                МассивФайловДляОбъединения.Добавить(Вложение.ПутьКФайлу); 
				//Часть2--

				//Часть3++
				ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
                ФайлаОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8);
                ТекстДляОтправки = "";
                ТекстДляОтправки = ТекстДляОтправки + Символы.ПС  + "--" +  ГУИД +"--";
                ФайлаОтправкиКонец.ЗаписатьСтроку(ТекстДляОтправки);
                ФайлаОтправкиКонец.Закрыть(); 
                МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); 
                //Часть3--

                ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt"); 
                ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
                
                //Отправка
	            Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL); 
				Запрос = Новый HTTPЗапрос(Ресурс);
                Запрос.Заголовки.Вставить("Connection", "keep-alive"); 
                Запрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + ГУИД); 
                Запрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);    
                
				Ответ = Соединение.ОтправитьДляОбработки(Запрос);
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				
				ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
				ok = ОтветСоотв["ok"] ;
				
				Если ok = Истина Тогда
					УспешноОтправлено = Истина;
					СообщениеИД = ОтветСоотв["result"]["message_id"];
				Иначе
					УспешноОтправлено = Ложь;
					СообщениеИД = 0;
				КонецЕсли;
				ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Истина);
			//Файл--
			//ИначеЕсли // Другие типы вложений
			
			КонецЕсли;
		
		//Вложения--
		ИначеЕсли ЗначениеЗаполнено(СсылкаДокИсхСообщение.Клавиатура) Тогда //Сообщение содержить только клавиатуру 
		//Клавиатура++
		
			//КЛАВИАТУРУ САМУ ПО СЕБЕ ПОСЫЛАТЬ НЕЛЬЗЯ!!!
		
			//Команда = "sendMessage";
			//Ресурс = "bot"+Ключ+"/"+Команда+"?chat_id="+Формат(СсылкаДокИсхСообщение.ТелеграмКонтакт.ИД,"ЧГ="); 
			//
			// // добавляем клавиатуру	
			//Попытка
			//	МассивСоСтрокамиКнопок = ЗначениеИзСтрокиВнутр(СсылкаДокИсхСообщение.Клавиатура);
			//Исключение
			//	ОписаниеОшибки = "Не удалось сформировать клавиатуру из строки. " + СсылкаДокИсхСообщение;
			//	ЗаписьВЖурналОшибок("ТелеграмМодуль", "ОтправитьСообщениеИсходящие", ОписаниеОшибки);
			//КонецПопытки;
			//
			//ЗаписьJSON = Новый ЗаписьJSON;
			//ЗаписьJSON.УстановитьСтроку();  
			//ЗаписатьJSON(ЗаписьJSON, Новый Структура("inline_keyboard", МассивСоСтрокамиКнопок));
			//Клавиатура = ЗаписьJSON.Закрыть();
			//
			//Ресурс = Ресурс + "&reply_markup=" + Клавиатура;
			//			
			//Соединение = Новый HTTPСоединение(Сервер,,,,Прокси,,Новый ЗащищенноеСоединениеOpenSSL);
			//Запрос = Новый HTTPЗапрос(Ресурс); 
			//
			//Ответ = Соединение.Получить(Запрос);
			//Чтение = Новый ЧтениеJSON;
			//Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			//
			//ОтветСоотв = ПрочитатьJSON(Чтение,Истина);
			//ok = ОтветСоотв["ok"] ;
			//
			//Если ok = Истина Тогда
			//	УспешноОтправлено = Истина;
			//	СообщениеИД = ОтветСоотв["result"]["message_id"];
			//Иначе
			//	УспешноОтправлено = Ложь;
			//	СообщениеИД = 0;
			//КонецЕсли;	
		//Клавиатура--
		Иначе //Если сообщение не содержит никакой информации то закрываем задачу сделав запись в журнал ошибок
		    ОписаниеОшибки = "Было передано к отправке в телеграм пустое сообщение " + СсылкаДокИсхСообщение;
			ЗаписьВЖурналОшибок("ТелеграмМодуль", "ОтправитьСообщениеИсходящие", ОписаниеОшибки);
			УспешноОтправлено = Истина;
		КонецЕсли;	
	   
	Исключение
		// не ставим ошибку обработки. Если она произошла до сохранения файла флаг УспешноОбработано и так будет ложь
		ОписаниеОшибки = "Ошибка при отправке исходящего сообщения в телеграм. Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("ТелеграмМодуль", "ОтправитьСообщениеИсходящие", ОписаниеОшибки);
		ИзменитьПриоритетПроксиСервераТелеграм(Соединение.Прокси, Ложь);
	КонецПопытки;

	
	Если УспешноОтправлено Тогда 
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияИсходящиеКОтправке.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сообщение = СсылкаДокИсхСообщение;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();	
		
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияИсходящиеОтправленные.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаОтправки = ТекущаяДата();
		МенеджерЗаписи.Сообщение = СсылкаДокИсхСообщение;
		МенеджерЗаписи.СообщениеИД = СообщениеИД;
		МенеджерЗаписи.Записать(Истина);		
	Иначе
		//Снимаем флаг если не удалось успешно обработать
		МенеджерЗаписи = РегистрыСведений.ТелеграмСообщенияИсходящиеКОтправке.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сообщение = СсылкаДокИсхСообщение;
		МенеджерЗаписи.ВПроцессеОбработки = Ложь;	
		МенеджерЗаписи.Записать();	
	КонецЕсли;
	                         
КонецПроцедуры



//Определить является ли значение коллекцией которую можно обойти в цикле
Функция ЗначениеЯвляетсяКоллекцией(Значение)	
			
	Если ТипЗнч(Значение) = Тип("Соответствие")
	или  ТипЗнч(Значение) = Тип("Массив")
	// дополнять типы коллекций
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;	
	
КонецФункции

//ОпределитьТипФайлаПоРасширению
Функция ТипФайлаДляТелеграм(Расширение)
	
	ТипФайла = "document"; //Универсальный тип
	
	Если нРег(Расширение) = "jpg" Тогда 
		ТипФайла = "photo";
	//ИначеЕсли
	КонецЕсли;
	
	Возврат ТипФайла;
	
КонецФункции

Процедура ИзменитьПриоритетПроксиСервераТелеграм(ПроксиСервер, УдалосьУстановитьСоединение)
	
	Если  ПолучитьПризнакИспользованияПроксиТелеграмБота() = Истина Тогда
		ЗапросПрокси = Новый Запрос();
		ЗапросПрокси.Текст = "ВЫБРАТЬ
		                     |	ПроксиСервера.Ссылка КАК Ссылка
		                     |ИЗ
		                     |	Справочник.ПроксиСервера КАК ПроксиСервера
		                     |ГДЕ
		                     |	ПроксиСервера.АдресПроксиСервера = &АдресПроксиСервера
		                     |	И ПроксиСервера.ПортПроксиСервера = &ПортПроксиСервера
		                     |	И ПроксиСервера.МожноИспользовать";
		ЗапросПрокси.УстановитьПараметр("АдресПроксиСервера", ПроксиСервер.Сервер("https"));
		ЗапросПрокси.УстановитьПараметр("ПортПроксиСервера", ПроксиСервер.Порт("https"));

		ВыборкаПрокси = ЗапросПрокси.Выполнить().Выбрать();
		
		Если ВыборкаПрокси.Количество() = 1 Тогда 
			ВыборкаПрокси.Следующий();
			Если УдалосьУстановитьСоединение Тогда 
				Дельта = 200;
			Иначе
				Дельта = -30;
			КонецЕсли;
			ВебОбщий.ИзменитьПриоритетПрокси(ВыборкаПрокси.Ссылка, Дельта);	
		ИначеЕсли ВыборкаПрокси.Количество() > 1 Тогда 
			ЗаписьВЖурналОшибок("ТелеграмМодуль", "ИзменитьПриоритетПроксиСервераТелеграм", "Дублирование прокси серверов: " + ПроксиСервер.Сервер("https") + ПроксиСервер.Порт("https"));
		ИначеЕсли ВыборкаПрокси.Количество() = 0 Тогда 
			ЗаписьВЖурналОшибок("ТелеграмМодуль", "ИзменитьПриоритетПроксиСервераТелеграм", "Был использован не разрешённый прокси сервер: " + ПроксиСервер.Сервер("https") + ПроксиСервер.Порт("https"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

