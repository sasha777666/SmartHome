
// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));

КонецФункции // ПолучитьОписаниеТиповДаты()

&НаСервере
Процедура ВыполнитьПроцедуруФункциюВФонеНаСервере(ПолноеИмяПроцедурыФункции, МассивСПараметрами) Экспорт 
	
	мПараметры = Новый Массив();
	мПараметры.Добавить(ПолноеИмяПроцедурыФункции);	
	мПараметры.Добавить(МассивСПараметрами);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ФоновоеВыполнениеПроцедурыФункции", мПараметры); 
	
КонецПроцедуры

// ЗаписатьДанныеОборудования  
// Параметры:
// Оборудование - Ссылка на справочник оборудование
// ОбъектДанных - Произвольный - Для идентификации данных (Рекомендуется - Строка)
// Данные - Произвольный - Любые данные примитивного типа, либо ссылка, если строка то не более 100 символов
// ДатаДанных - Дата получения данных, по умолчанию текущая
&НаСервере
Процедура ЗаписатьДанныеОборудования(Оборудование, ОбъектДанных, Данные = 0, ДатаДанных = Неопределено, Хранилище = Неопределено) Экспорт
	
	ДатаЗаписи = ТекущаяДата();
	
	ТекДанные = РегистрыСведений.ТекущиеДанныеОборудования.СоздатьМенеджерЗаписи();
	ИстДанные = РегистрыСведений.ИсторияДанныеОборудования.СоздатьМенеджерЗаписи();
	
	
	Если ТипЗнч(Хранилище) = Тип("ХранилищеЗначения") Тогда
		ТекДанные.Хранилище = Хранилище; 	
	КонецЕсли;
	
	ТекДанные.Оборудование = Оборудование;
	ИстДанные.Оборудование = Оборудование;
	
	ТекДанные.ОбъектДанных = ОбъектДанных;
	ИстДанные.ОбъектДанных = ОбъектДанных;
		
	ТекДанные.Данные = Данные;
	ИстДанные.Данные = Данные;
	
	Если ЗначениеЗаполнено(ДатаДанных) Тогда 
		ТекДанные.Дата = ДатаДанных;
		ИстДанные.Период = ДатаДанных;
	Иначе
		ТекДанные.Дата = ДатаЗаписи;
		ИстДанные.Период = ДатаЗаписи;
	КонецЕсли;
		
	ТекДанные.Записать(Истина);
	ИстДанные.Записать(Истина);
	 	
КонецПроцедуры


// СкопироватьПереместитьКаталогСкомпонованнойГруппы  
// Параметры:
// ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога - Строка - Полный путь к каталогу источнику (без последнего слеша, пример C:\Папка1\СтараяПапкаКоторуюНужноСкопировать)
// ПолныйПутьКаталогаПриёмникаВКоторыйСкопироватьКаталог - Строка - Полный путь к каталогу источнику (без последнего слеша, пример C:\Папка2)
// Перемещать - Булево - Если нужно переместить каталог то Истина иначе будут скопирвоаны
Процедура СкопироватьПереместитьКаталог(ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога, ПолныйПутьКаталогаПриёмникаВКоторыйСкопироватьКаталог, Перемещать = Ложь) Экспорт
	
	ИмяКопируемогоКаталога = Сред(ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога,СтрНайти(ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога, "\", НаправлениеПоиска.СКонца)+1);

	ПолныйПутьНовогоКаталогаСКопируемымКаталогом = ПолныйПутьКаталогаПриёмникаВКоторыйСкопироватьКаталог + "\" + ИмяКопируемогоКаталога;
	СоздатьКаталог(ПолныйПутьНовогоКаталогаСКопируемымКаталогом);
	
	НайденныеФайлы = НайтиФайлы(ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога, "*.*", Истина);
	Для Каждого НайденныйОбъект Из НайденныеФайлы Цикл
		Если НайденныйОбъект.ЭтоКаталог() Тогда
		    СоздатьКаталог(СтрЗаменить(НайденныйОбъект.ПолноеИмя, ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога, ПолныйПутьНовогоКаталогаСКопируемымКаталогом));            
		    Продолжить;   
		Иначе
		    Если Перемещать Тогда                
		        ПереместитьФайл(НайденныйОбъект.ПолноеИмя, СтрЗаменить(НайденныйОбъект.ПолноеИмя, ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога, ПолныйПутьНовогоКаталогаСКопируемымКаталогом));	        
		    Иначе
		        КопироватьФайл(НайденныйОбъект.ПолноеИмя, СтрЗаменить(НайденныйОбъект.ПолноеИмя, ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога, ПолныйПутьНовогоКаталогаСКопируемымКаталогом));     
		    КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Перемещать Тогда
		 УдалитьФайлы(ПолныйПутьКаталогаИсточникаСИменемКопируемогоКаталога);    
	КонецЕсли;
	
КонецПроцедуры

	 



/////////////////////////////ПроцедурыФункции для работы модуля//////////////////////////////
&НаСервере
Процедура ФоновоеВыполнениеПроцедурыФункции(ПолноеИмяПроцедуры, МассивСПараметрами) Экспорт
	
	ВыполняемыйКод = "" + ПолноеИмяПроцедуры + "(";
	н = -1;
	Для Каждого мПараметр Из МассивСПараметрами Цикл
		н = н+1;
		ВыполняемыйКод = ВыполняемыйКод + " МассивСПараметрами[" + н + "],";
	КонецЦикла;
	
	ВыполняемыйКод = Лев(ВыполняемыйКод, СтрДлина(ВыполняемыйКод) - 1);
	ВыполняемыйКод = ВыполняемыйКод + ");";
		
	Попытка
		Выполнить(ВыполняемыйКод);	
	Исключение
		ОписаниеОшибки = "Сбой при выполнении процедуры в фоне. Описание ошибки: " + ОписаниеОшибки();
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + "Выполняемый код: " + ВыполняемыйКод;
		ЗаписьВЖурналОшибок("ОбщегоНазначения", "ФоновоеВыполнениеПроцедурыФункции", ОписаниеОшибки);	
	КонецПопытки;
	
КонецПроцедуры
