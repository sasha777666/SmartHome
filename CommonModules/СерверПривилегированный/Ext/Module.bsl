
Процедура ПостоянноВыполняющаясяCOM() Экспорт // эта процедура стартует при запуске регл задания СеансСервера	
	Перем Native;
	
	NativeS = К.NativeПодключитьКомпоненту();	  // Для управления задержкой
	Если NativeS = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	NativeСтруктура = Новый Структура();
	ЗапросНевыполненыхКоманд = Новый Запрос();
	ЗапросНевыполненыхКоманд.Текст = "ВЫБРАТЬ
	                                 |	COM.НомерCOMПорта,
	                                 |	COM.Команда КАК Команда,
	                                 |	COM.НомерПина,
	                                 |	COM.Аргумент
	                                 |ИЗ
	                                 |	РегистрСведений.COM КАК COM
	                                 |ГДЕ
	                                 |	НЕ COM.КомандаВыполнена
	                                 |	И НЕ COM.Ошибка
	                                 |
	                                 |УПОРЯДОЧИТЬ ПО
	                                 |	Команда УБЫВ";
	// бесконечный цикл для поддержки открытых COM соединений	
	Пока Константы.ОстановитьРегламентныеЗадания.Получить() = Ложь Цикл	
		РезультатКомандыКВыполнению = ЗапросНевыполненыхКоманд.Выполнить();
		Если НЕ РезультатКомандыКВыполнению.Пустой() Тогда	
			ВыборкаКоманды = РезультатКомандыКВыполнению.Выбрать();	
			Пока ВыборкаКоманды.Следующий() Цикл
				НомерCOMПорта = ВыборкаКоманды.НомерCOMПорта;
				Команда = ВыборкаКоманды.Команда;
				НомерПина = ВыборкаКоманды.НомерПина;
				Аргумент = ВыборкаКоманды.Аргумент; 
				Если Команда = 256 Тогда // Открыть/Переоткрыть COM порт
					Если NativeСтруктура.Свойство("Native"+НомерCOMПорта, Native) Тогда
						Попытка
							Native.Закрыть();
						Исключение
							ОписаниеОшибки = "При переоткрытии COM порта не удалось его закрыть. Описание ошибки: " + ОписаниеОшибки();
							ЗаписьВЖурналОшибок("СерверПривилегированный", "ПостоянноВыполняющаясяCOM", ОписаниеОшибки);	
						КонецПопытки;
						NativeS.Задержка(1500);
					Иначе
						Native = К.NativeПодключитьКомпоненту();
						NativeСтруктура.Вставить("Native"+НомерCOMПорта, Native); 
					КонецЕсли;
					Если NativeОткрытьCOMПорт(Native, НомерCOMПорта, Аргумент)Тогда // успешно
						NativeS.Задержка(1500);
						ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Истина, Ложь);
					Иначе // неудача
						ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Ложь, Истина);	
					КонецЕсли;
				ИначеЕсли Команда = 257 Тогда // Закрыть COM порт
					Если NativeСтруктура.Свойство("Native"+НомерCOMПорта, Native) Тогда
						Попытка
							Native.Закрыть();
							Native = Неопределено;
							NativeСтруктура.Удалить("Native"+НомерCOMПорта); 
							ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Истина, Ложь);
						Исключение
							ОписаниеОшибки = "При закрытии COM порта произошла ошибка. Описание ошибки: " + ОписаниеОшибки();
							ЗаписьВЖурналОшибок("СерверПривилегированный", "ПостоянноВыполняющаясяCOM", ОписаниеОшибки);	
							ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Ложь, Истина);		
						КонецПопытки;
						NativeS.Задержка(1500);
					Иначе
						ОписаниеОшибки = "Не удалось закрыть COM порт т.к. он не открыт (нет в структуре)";
						ЗаписьВЖурналОшибок("СерверПривилегированный", "ПостоянноВыполняющаясяCOM", ОписаниеОшибки);
						ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Ложь, Истина);
					КонецЕсли;				
				ИначеЕсли Команда = 258 Тогда // Пересоздать компоненту и открыть COM порт	
					Если NativeСтруктура.Свойство("Native"+НомерCOMПорта, Native) Тогда
						Попытка
							Native.Закрыть(); 	
						Исключение
							ОписаниеОшибки = "При пересоздании компоненты COM порта не удалось закрыть порт. Описание ошибки: " + ОписаниеОшибки();
							ЗаписьВЖурналОшибок("СерверПривилегированный", "ПостоянноВыполняющаясяCOM", ОписаниеОшибки);	
						КонецПопытки; 
						NativeS.Задержка(1500);  
					КонецЕсли;            
					Native = Неопределено;
					Native = К.NativeПодключитьКомпоненту();
					NativeСтруктура.Вставить("Native"+НомерCOMПорта, Native);
					Если NativeОткрытьCOMПорт(Native, НомерCOMПорта, Аргумент)Тогда // успешно
						NativeS.Задержка(1500);
						ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Истина, Ложь);
					Иначе // неудача
						ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Ложь, Истина);	
					КонецЕсли;
				ИначеЕсли Команда = 259 Тогда // Проверить есть ли компонента и выполнить проверку COM порта
					Ответ = Новый Структура();
					Если NativeСтруктура.Свойство("Native"+НомерCOMПорта, Native) Тогда //Компонента для указанного COM порта есть
						Если Аргумент = 1 Тогда //Выполняем проверку связи
							Ответ = NativeОтправитьКомандуИПолучитьОтвет(Native, НомерCOMПорта, 254, 0, Аргумент);	
							Если Ответ.ОтветАргумент1 = Аргумент Тогда // Проверка успешно пройдена
								Ответ.Вставить("ОтветАргумент1", 1); // Код 1 означает успех
							Иначе // Проверка не пройдена
								Ответ.Вставить("ОтветАргумент1", 3); // Код 3 означает, что компоненты есть, но проверка связи завершилась неудачей	
							КонецЕсли;
						Иначе // Нужно только проверить наличие компоненты, без проверки связи 
							Ответ.Вставить("ОтветАргумент1", 1); // Код 1 означает успех	
						КонецЕсли;
					Иначе // Компоненты Нет
						Ответ.Вставить("ОтветАргумент1", 2); // Код 2 означает, что компоненты нет
					КонецЕсли;
					Ответ.Вставить("ОтветСтатус", 254);
					Ответ.Вставить("ОтветАргумент2", 0);
					ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Ответ, Истина, Ложь);
				Иначе // Отправить команду на устройство
					Если NativeСтруктура.Свойство("Native"+НомерCOMПорта, Native) Тогда	
						Ответ = NativeОтправитьКомандуИПолучитьОтвет(Native, НомерCOMПорта, Команда, НомерПина, Аргумент);	
						Если Ответ = Неопределено Тогда // Ошибка
							ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Ложь, Истина);	
						Иначе // Всё ОК 								
							ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Ответ, Истина, Ложь);
						КонецЕсли;	
					Иначе
						ОписаниеОшибки = "Не удалось выполнить команду т.к. COM порт не открыт (нет в структуре)";
						ЗаписьВЖурналОшибок("СерверПривилегированный", "ПостоянноВыполняющаясяCOM", ОписаниеОшибки); 	
						ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Неопределено, Ложь, Истина);
					КонецЕсли;	
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;	        
		NativeS.Задержка(30);		
	КонецЦикла;
	
КонецПроцедуры
Функция NativeОткрытьCOMПорт(Native, НомерCOMПорта, СкоростьCOMПорта)
	
	Попытка
		Native.Открыть(НомерCOMПорта, СкоростьCOMПорта);
		Успешно = Native.Открыт;
	Исключение
		Native.Закрыть();
		ОписаниеОшибки = "Не удалось открыть COM порт ("+НомерCOMПорта+", "+СкоростьCOMПорта+"). Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("СерверПривилегированный", "NativeОткрытьCOMПорт", ОписаниеОшибки);  
		Успешно = Ложь;
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции
Функция NativeОтправитьКомандуИПолучитьОтвет(Native, НомерCOMПорта, Команда, НомерПина, Аргумент) Экспорт
	
	Попытка 
		КонтрольнаяСумма = Команда + НомерПина + Аргумент;
		Пока КонтрольнаяСумма > 255 Цикл
			КонтрольнаяСумма = КонтрольнаяСумма - 256;
		КонецЦикла;
				
		СтрокаОтправки = "" + Из_10_В_16(Команда) + Из_10_В_16(НомерПина)
		+ Из_10_В_16(Аргумент) + Из_10_В_16(КонтрольнаяСумма);		
		
		Native.Получить(); // для очистки буфера КОМ порта
		Native.Отправить(СтрокаОтправки);
		рет = 0;
		Ответ = "";
		ВремяСброса = ТекущаяДата()+5;
		Пока рет < 8 Цикл
			рет = рет + Native.Получить();
	        Ответ = Ответ +  Native.Ответ;
			Native.Задержка(1);
			Если ТекущаяДата() > ВремяСброса Тогда // Нет ответа или сбой передачи
				ОписаниеОшибки = "Не дождались ответа от контроллера. рет= " + рет + ", Ответ = """ + Ответ + """, = " + Команда + ", " + НомерПина + ", " + Аргумент + " порт = " + НомерCOMПорта;
				ЗаписьВЖурналОшибок("СерверПривилегированный", "NativeОтправитьКомандуИПолучитьОтвет", ОписаниеОшибки); 			
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если рет = 8 Тогда 
			а = Из_16_В_10(Сред(Ответ,1,2)); 
			б = Из_16_В_10(Сред(Ответ,3,2)); 
			в = Из_16_В_10(Сред(Ответ,5,2));
			г = Из_16_В_10(Сред(Ответ,7,2)); 
			абв = а+б+в;
			Пока абв > 255 Цикл
				абв = абв - 256;
			КонецЦикла;
			Если абв = г Тогда // Проверка контрольной суммы пройдена успешна
				Ответ = Новый Структура();
				Ответ.Вставить("ОтветСтатус", а);
				Ответ.Вставить("ОтветАргумент1", б);
				Ответ.Вставить("ОтветАргумент2", в);	
			Иначе
				ОписаниеОшибки = "Контрольная сумма не правильная. Количество полученных байт = " + рет + ", Ответ = """ + Ответ + """, = " + Команда + ", " + НомерПина + ", " + Аргумент + " в порт = " + НомерCOMПорта;
				ЗаписьВЖурналОшибок("СерверПривилегированный", "NativeОтправитьКомандуИПолучитьОтвет", ОписаниеОшибки); 			
				Ответ = Неопределено;	
			КонецЕсли;
		Иначе
			ОписаниеОшибки = "Полученный ответ не = 8 байтам. Количество полученных байт = " + рет + ", Ответ = """ + Ответ + """, = " + Команда + ", " + НомерПина + ", " + Аргумент + " в порт = " + НомерCOMПорта;
			ЗаписьВЖурналОшибок("СерверПривилегированный", "NativeОтправитьКомандуИПолучитьОтвет", ОписаниеОшибки); 			
			Ответ = Неопределено;			
		КонецЕсли;		
	Исключение
		ОписаниеОшибки = "Произошёл сбой во время отправки команды или получения ответа = " + Команда + ", " + НомерПина + ", " + Аргумент + " в порт = " + НомерCOMПорта + ". Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("СерверПривилегированный", "NativeОтправитьКомандуИПолучитьОтвет", ОписаниеОшибки); 			
		Ответ = Неопределено;	
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции
Процедура ЗаписатьРезультатВыполненияКомандыCOM(НомерCOMПорта, НомерПина, Команда, Аргумент, Ответ, КомандаВыполнена, Ошибка)
	
	Менеджер = РегистрыСведений.COM.СоздатьМенеджерЗаписи();
	Менеджер.НомерCOMПорта = НомерCOMПорта;
	Менеджер.НомерПина = НомерПина;
	Менеджер.Прочитать();
	Если Менеджер.Команда = Команда И Менеджер.Аргумент = Аргумент Тогда // Проверяем что команда за время исполнения не изменилась 
		Если Ответ = Неопределено Тогда 
			Менеджер.ОтветСтатус = 0;
			Менеджер.ОтветАргумент1 = 0;
		 	Менеджер.ОтветАргумент2 = 0;
		Иначе 
			ЗаполнитьЗначенияСвойств(Менеджер, Ответ);
		КонецЕсли;	
		Менеджер.КомандаВыполнена = КомандаВыполнена;
		Менеджер.Ошибка = Ошибка;
		Менеджер.ДатаВыполнения = ТекущаяДата();

		Менеджер.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПостоянноВыполняющаясяNET() Экспорт // эта процедура стартует при запуске регл задания СеансСервера

	NativeS = К.NativeПодключитьКомпоненту();	  // Для управления задержкой
	Если NativeS = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОчисткаДавшихСбойЗаданийNET(); // Такие ошибки должны возникать только при неправильном завершении работы системы.

	ЗапросНевыполненыхКоманд = Новый Запрос();
	ЗапросНевыполненыхКоманд.Текст = "ВЫБРАТЬ
	                                 |	NET.АдресПорт КАК АдресПорт,
	                                 |	NET.Команда КАК Команда,
	                                 |	NET.НомерПина,
	                                 |	NET.Аргумент,
	                                 |	NET.ДопАргументNET
	                                 |ИЗ
	                                 |	РегистрСведений.NET КАК NET
	                                 |ГДЕ
	                                 |	НЕ NET.КомандаВыполнена
	                                 |	И НЕ NET.Ошибка
	                                 |	И НЕ NET.ВПроцессеОбработки
	                                 |
	                                 |УПОРЯДОЧИТЬ ПО
	                                 |	Команда УБЫВ
	                                 |ИТОГИ ПО
	                                 |	АдресПорт";
									 
	Пока Константы.ОстановитьРегламентныеЗадания.Получить() = Ложь Цикл	
		РезультатКомандыКВыполнению = ЗапросНевыполненыхКоманд.Выполнить();
		Если НЕ РезультатКомандыКВыполнению.Пустой() Тогда
			ВыборкаАдресПорт = РезультатКомандыКВыполнению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
			Пока ВыборкаАдресПорт.Следующий() Цикл
				
				ВыборкаКоманды = ВыборкаАдресПорт.Выбрать();
				МассивNET = Новый Массив();
				Пока ВыборкаКоманды.Следующий() Цикл
					
					//Ставим флаг в обработке, флаг снимется в фоновом задании в процедуре ЗаписатьРезультатВыполненияКомандыNET
					МенеджерЗаписи = РегистрыСведений.NET.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.АдресПорт = ВыборкаКоманды.АдресПорт;
					МенеджерЗаписи.НомерПина = ВыборкаКоманды.НомерПина;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.ВПроцессеОбработки = Истина;
					МенеджерЗаписи.ДатаНачалаОбработки = ТекущаяДата();
					МенеджерЗаписи.Записать(Истина);
					
					Элемент = Новый Структура();
					Элемент.Вставить("АдресПорт", ВыборкаКоманды.АдресПорт);
					Элемент.Вставить("Команда", ВыборкаКоманды.Команда);
					Элемент.Вставить("НомерПина", ВыборкаКоманды.НомерПина);
					Элемент.Вставить("Аргумент", ВыборкаКоманды.Аргумент);
					Элемент.Вставить("ДопАргументNET", ВыборкаКоманды.ДопАргументNET);
					МассивNET.Добавить(Элемент);
					
				КонецЦикла;
				
				мПараметры = Новый Массив();
				мПараметры.Добавить(МассивNET);			
				ФоновыеЗадания.Выполнить("СерверПривилегированный.ФоновоеВыполнениеЗапросовNET", мПараметры); 
												
			КонецЦикла;
		КонецЕсли;	
		NativeS.Задержка(30);		
	КонецЦикла;
	
КонецПроцедуры
Процедура ФоновоеВыполнениеЗапросовNET(МассивСКомандами) Экспорт
	
	Попытка // Фоновое задание должно быть выполнено, иначе нужно снять галки в процессе обработки с записей регистра NET
		Для Каждого ВыборкаКоманды Из МассивСКомандами Цикл
			
			АдресПорт = ВыборкаКоманды.АдресПорт;
			Команда = ВыборкаКоманды.Команда;
			НомерПина = ВыборкаКоманды.НомерПина;
			Аргумент = ВыборкаКоманды.Аргумент; 
			ДопАргументNET = ВыборкаКоманды.ДопАргументNET;
			
			Ответ = HTTPОтправитьКомандуИПолучитьОтвет(АдресПорт, Команда, НомерПина, Аргумент, ДопАргументNET);	
			Если Ответ = Неопределено Тогда // Ошибка
				ЗаписатьРезультатВыполненияКомандыNET(АдресПорт, НомерПина, Команда, Аргумент, ДопАргументNET, Неопределено, Ложь, Истина);	
			Иначе // Всё ОК 								
				ЗаписатьРезультатВыполненияКомандыNET(АдресПорт, НомерПина, Команда, Аргумент, ДопАргументNET, Ответ, Истина, Ложь);
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Сбой при выполнении фонового задания отправки группы запросов контроллера (АдресПорт). Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("СерверПривилегированный", "ФоновоеВыполнениеЗапросовNET", ОписаниеОшибки); 			
	КонецПопытки;
	
КонецПроцедуры
Функция HTTPОтправитьКомандуИПолучитьОтвет(АдресПорт, Команда, НомерПина, Аргумент, ДопАргументNET) Экспорт

	Попытка
		КонтрольнаяСумма = Команда + НомерПина + Аргумент;
		Пока КонтрольнаяСумма > 255 Цикл
			КонтрольнаяСумма = КонтрольнаяСумма - 256;
		КонецЦикла;
				
		СтрокаОтправки = "?a=" + Из_10_В_16(Команда) + "&b=" + Из_10_В_16(НомерПина)
		+ "&c=" + Из_10_В_16(Аргумент) + "&d=" + Из_10_В_16(КонтрольнаяСумма) 
		+ "&dopArg=" + ДопАргументNET;		
		
		NETЗапрос = Новый HTTPЗапрос(СтрокаОтправки);  	
		NETСоединение = Новый HTTPСоединение(АдресПорт,,,,,5);
		HTTPОтвет = NETСоединение.Получить(NETЗапрос);
		NETОтвет = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.ANSI);
		
		Ответ = NETОтвет;
		Если СтрДлина(Ответ)>= 8 Тогда 
			а = Из_16_В_10(Сред(Ответ,1,2)); 
			б = Из_16_В_10(Сред(Ответ,3,2)); 
			в = Из_16_В_10(Сред(Ответ,5,2));
			г = Из_16_В_10(Сред(Ответ,7,2)); 
			д = Сред(Ответ, 9);
			абв = а+б+в;
			Пока абв > 255 Цикл
				абв = абв - 256;
			КонецЦикла;
			Если абв = г Тогда // Проверка контрольной суммы пройдена успешна
				Ответ = Новый Структура();
				Ответ.Вставить("ОтветСтатус", а);
				Ответ.Вставить("ОтветАргумент1", б);
				Ответ.Вставить("ОтветАргумент2", в);
				Ответ.Вставить("ОтветДопАргументNET", д); 
			Иначе
				ОписаниеОшибки = "Контрольная сумма не правильная. Количество полученных символов = " + СтрДлина(Ответ) + ", Ответ = """ + Ответ + """, = " + Команда + ", " + НомерПина + ", " + Аргумент + " на адрес = " + АдресПорт;
				ЗаписьВЖурналОшибок("СерверПривилегированный", "HTTPОтправитьКомандуИПолучитьОтвет", ОписаниеОшибки); 			
				Ответ = Неопределено;	
			КонецЕсли;
		Иначе
			ОписаниеОшибки = "Полученный ответ меньше 8 символо. Количество полученных символов = " + СтрДлина(Ответ) + ", Ответ = """ + Ответ + """, = " + Команда + ", " + НомерПина + ", " + Аргумент + " на адрес = " + АдресПорт;
			ЗаписьВЖурналОшибок("СерверПривилегированный", "HTTPОтправитьКомандуИПолучитьОтвет", ОписаниеОшибки); 			
			Ответ = Неопределено;			
		КонецЕсли;		
	Исключение
		ОписаниеОшибки = "Произошёл сбой во время отправки команды или получения ответа = " + Команда + ", " + НомерПина + ", " + Аргумент + " на адрес = " + АдресПорт + ". Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("СерверПривилегированный", "HTTPОтправитьКомандуИПолучитьОтвет", ОписаниеОшибки); 			
		Ответ = Неопределено;	
	КонецПопытки;	
	
	Возврат Ответ;
	
КонецФункции
Процедура ЗаписатьРезультатВыполненияКомандыNET(АдресПорт, НомерПина, Команда, Аргумент, ДопАргументNET, Ответ, КомандаВыполнена, Ошибка)
	
	Менеджер = РегистрыСведений.NET.СоздатьМенеджерЗаписи();
	Менеджер.АдресПорт = АдресПорт;
	Менеджер.НомерПина = НомерПина;
	Менеджер.Прочитать();
	Если Менеджер.Команда = Команда И Менеджер.Аргумент = Аргумент И Менеджер.ДопАргументNET = ДопАргументNET Тогда // Проверяем что команда за время исполнения не изменилась 
		Если Ответ = Неопределено Тогда 
			Менеджер.ОтветСтатус = 0;
			Менеджер.ОтветАргумент1 = 0;
		 	Менеджер.ОтветАргумент2 = 0;
		Иначе 
			ЗаполнитьЗначенияСвойств(Менеджер, Ответ);
		КонецЕсли;	
		Менеджер.КомандаВыполнена = КомандаВыполнена;
		Менеджер.Ошибка = Ошибка;
		Менеджер.ВПроцессеОбработки = Ложь;
		Менеджер.ДатаНачалаОбработки = '00010101';
		Менеджер.ДатаВыполнения = ТекущаяДата();

		Менеджер.Записать(Истина);
	Иначе
		ОписаниеОшибки = "Во время выполнения команды NET она была изменена. АдресПорт = " + АдресПорт + " Номер пина = " + НомерПина
		+ " Команда = " + Команда + " Аргумент = " + Аргумент + " ДопАргументNET = " + ДопАргументNET + "; Данные регистра:" 
		+ "Менеджер.АдресПорт = " + Менеджер.АдресПорт + " Менеджер.Номер пина = " + Менеджер.НомерПина + " Менеджер.Команда = " + Менеджер.Команда 
		+ " Менеджер.Аргумент = " + Менеджер.Аргумент + " Менеджер.ДопАргументNET = " + Менеджер.ДопАргументNET;
		ЗаписьВЖурналОшибок("СерверПривилегированный", "ЗаписатьРезультатВыполненияКомандыNET", ОписаниеОшибки);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаДавшихСбойЗаданийNET()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	NET.АдресПорт,
	               |	NET.НомерПина
	               |ИЗ
	               |	РегистрСведений.NET КАК NET
	               |ГДЕ
	               |	NET.ВПроцессеОбработки
	               |	И NET.ДатаНачалаОбработки < &ДатаНачалаОбработки";
	Запрос.УстановитьПараметр("ДатаНачалаОбработки", ТекущаяДата() - 60); // Команды начатые обрабатываться более 1 минуты назад считаются повисшими
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.NET.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.АдресПорт = Выборка.АдресПорт;
		МенеджерЗаписи.НомерПина = Выборка.НомерПина;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();	
		ОписаниеОшибки = "Удалено зависшее задание NET. АдресПорт: " + Выборка.АдресПорт + " НомерПина: " + Выборка.НомерПина;
		ЗаписьВЖурналОшибок("СерверПривилегированный", "ОчисткаДавшихСбойЗаданийNET", ОписаниеОшибки); 						
	КонецЦикла
		
КонецПроцедуры


Функция Из_10_В_16(Аргумент) 
	 Значение = Аргумент;
     Результат="";
     Пока Значение>0 Цикл
        Результат=Сред("0123456789:;<=>?",Значение%16+1,1)+Результат;
        Значение=Цел(Значение/16) ;
	 КонецЦикла;
	 Пока СтрДлина(Результат)<2 Цикл Результат = "0"+Результат; КонецЦикла;	 
     Возврат Результат;
КонецФункции
Функция Из_16_В_10(Аргумент) 
	 Значение = Аргумент;
     Результат=0;
     Для Х=1 По 2 Цикл
     	М=1;
        Для У=1 По 2-Х Цикл М=М*16 КонецЦикла;
        Результат=Результат+(Найти("0123456789:;<=>?",Сред(Значение,Х,1))-1)*М;
     КонецЦикла;
     Возврат Результат;
КонецФункции

Процедура ОсновнойПроцесс() Экспорт // Постоянно выполняющаяся процедура основного процесса
	
	NativeS = К.NativeПодключитьКомпоненту();	  // Для управления задержкой
	Если NativeS = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	//Инициализация (
	ДействияВыполняемыеПриЗапускеВыполнитьВсё();
	//Инициализация )

	ЗапросДляВыполненных = Новый Запрос();
	ЗапросДляВыполненных.Текст = "ВЫБРАТЬ
	                             |	Процессы.Наименование,
	                             |	Процессы.КлючФоновогоЗадания,
	                             |	Процессы.УникальныйИдентификатор,
	                             |	Процессы.МаксимальноеВремяИтерации
	                             |ИЗ
	                             |	РегистрСведений.Процессы КАК Процессы
	                             |ГДЕ
	                             |	Процессы.СейчасВыполняется"; 
	
	ЗапросДляСтарта = Новый Запрос();
	ЗапросДляСтарта.Текст = "ВЫБРАТЬ
	                        |	Процессы.Наименование КАК Наименование,
	                        |	Процессы.РасположениеПроцедуры,
	                        |	Процессы.НазваниеПроцедуры,
	                        |	Процессы.Оборудование,
	                        |	Процессы.Включён,
	                        |	Процессы.Комментарий,
	                        |	Процессы.ГруппаУсловий,
	                        |	Процессы.КлючФоновогоЗадания,
	                        |	Процессы.УникальныйИдентификатор
	                        |ИЗ
	                        |	РегистрСведений.Процессы КАК Процессы
	                        |ГДЕ
	                        |	ДОБАВИТЬКДАТЕ(Процессы.ДатаНач, СЕКУНДА, Процессы.МинИнтервалПослеСтарта) <= &ТекущаяДата
	                        |	И ДОБАВИТЬКДАТЕ(Процессы.ДатаКон, СЕКУНДА, Процессы.МинИнтервалПослеЗавершения) <= &ТекущаяДата
	                        |	И Процессы.Включён
	                        |	И НЕ Процессы.СейчасВыполняется
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	Наименование";
				   
	Пока Константы.ОстановитьРегламентныеЗадания.Получить() = Ложь Цикл	
		
		ВыборкаДляВыполненных = ЗапросДляВыполненных.Выполнить().Выбрать();
		Пока ВыборкаДляВыполненных.Следующий() Цикл
			ОбработкаПроцессаДляВыполненных(ВыборкаДляВыполненных);				
		КонецЦикла;
		
		ЗапросДляСтарта.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		ВыгрузкаДляСтарта = ЗапросДляСтарта.Выполнить().Выгрузить();
		Для Каждого Процесс Из ВыгрузкаДляСтарта Цикл
			СтруктураПроцесса = Новый Структура();
			Для Каждого Колонка Из Процесс.Владелец().Колонки Цикл
				СтруктураПроцесса.Вставить(Колонка.Имя, Процесс[Колонка.Имя]);	
			КонецЦикла;
			ОбработкаПроцессаДляСтарта(СтруктураПроцесса);			
		КонецЦикла;
		
		NativeS.Задержка(50);		
	КонецЦикла;

	
КонецПроцедуры

Процедура ОбработкаПроцессаДляВыполненных(ВыборкаДляВыполненных)
	
	НайденноеФонЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ВыборкаДляВыполненных.УникальныйИдентификатор);
	Если НайденноеФонЗадание = Неопределено Тогда // очистим данные
		НайденноеФонЗадание	= Новый Структура();
		НайденноеФонЗадание.Вставить("Наименование", ВыборкаДляВыполненных.Наименование);
		НайденноеФонЗадание.Вставить("Начало", '00010101');
		НайденноеФонЗадание.Вставить("Конец", '00010101');
		НайденноеФонЗадание.Вставить("Состояние", СостояниеФоновогоЗадания.Отменено);	
		ЗаписатьИнформациюОПроцессе(НайденноеФонЗадание);
	Иначе // задание есть
		Если НайденноеФонЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда 
			// изменяем запись в регистре, вносим информацию о завершении
			ЗаписатьИнформациюОПроцессе(НайденноеФонЗадание);			
		ИначеЕсли ВыборкаДляВыполненных.МаксимальноеВремяИтерации > 0 Тогда // Выполняем проверку на длительность 
			Если ТекущаяДата() > (НайденноеФонЗадание.Начало + ВыборкаДляВыполненных.МаксимальноеВремяИтерации) Тогда // Завершаем принудительно
				НайденноеФонЗадание.Отменить();
				НайденноеФонЗадание	= Новый Структура();
				НайденноеФонЗадание.Вставить("Наименование", ВыборкаДляВыполненных.Наименование);
				НайденноеФонЗадание.Вставить("Начало", '00010101');
				НайденноеФонЗадание.Вставить("Конец", '00010101');
				НайденноеФонЗадание.Вставить("Состояние", СостояниеФоновогоЗадания.Отменено);
				ЗаписатьИнформациюОПроцессе(НайденноеФонЗадание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроцессаДляСтарта(СтруктураПроцесса) Экспорт
		
	НайденноеФонЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(СтруктураПроцесса.УникальныйИдентификатор);
	Если НайденноеФонЗадание = Неопределено или НайденноеФонЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда	
		мПараметры = Новый Массив();
		мПараметры.Добавить(СтруктураПроцесса);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("СерверПривилегированный.ФоновыйПроцесс", мПараметры, СтруктураПроцесса.КлючФоновогоЗадания, СтруктураПроцесса.Наименование); 	 
		ЗаписатьИнформациюОПроцессе(ФоновоеЗадание);
	Иначе // Если по какимто причинам задание АКТИВНО, значит расхождение с регистром, необходимо исправить и сделать об этом записи
		Если НайденноеФонЗадание = Неопределено Тогда // Создаём структуру заменяющую фон задание
			НайденноеФонЗадание	= Новый Структура();
			НайденноеФонЗадание.Вставить("Наименование", СтруктураПроцесса.Наименование);
			НайденноеФонЗадание.Вставить("Начало", '00010101');
			НайденноеФонЗадание.Вставить("Конец", '00010101');
			НайденноеФонЗадание.Вставить("Состояние", СостояниеФоновогоЗадания.Отменено);
		КонецЕсли;
		ЗаписатьИнформациюОПроцессе(НайденноеФонЗадание);
	КонецЕсли;
				
КонецПроцедуры
Процедура ФоновыйПроцесс(СтруктураПараметров) Экспорт
	
	ГруппаУсловий = СтруктураПараметров.ГруппаУсловий;
	Если ЗначениеЗаполнено(ГруппаУсловий) Тогда // Проверяем условия из группы
		УсловияВыполняются = ПроверкаГруппыУсловий(ГруппаУсловий);
	Иначе
		УсловияВыполняются = Истина; //Если условий нет то считаем что они соблюдены
	КонецЕсли;
	
	Если УсловияВыполняются Тогда

		Если ТипЗнч(СтруктураПараметров.РасположениеПроцедуры) = Тип("Строка") Тогда
			Если СтрНайти(СокрЛ(СтруктураПараметров.РасположениеПроцедуры), "Обработки") = 1 Тогда // Это встроенная обработка
				КодВыполнения = "Обработка = " + СокрЛП(СтруктураПараметров.РасположениеПроцедуры) + ".Создать();
				|Обработка.Оборудование = СтруктураПараметров.Оборудование;
				|Обработка." + СокрЛП(СтруктураПараметров.НазваниеПроцедуры) + "(""" + СтруктураПараметров.Наименование + """);";
				
			Иначе // Считаем что это общий модуль, Оборудование передаётся в параметре
				КодВыполнения = СокрЛП(СтруктураПараметров.РасположениеПроцедуры) + "." 
				+ СокрЛП(СтруктураПараметров.НазваниеПроцедуры) + "(СтруктураПараметров.Оборудование);";
						
			КонецЕсли;
				
		ИначеЕсли ТипЗнч(СтруктураПараметров.РасположениеПроцедуры) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			ДвоичныеДанныеФайла = СтруктураПараметров.РасположениеПроцедуры.ФайлОбработки.Получить();
			ИмяОбработки = ПолучитьИмяВременногоФайла("epf");
			ДвоичныеДанныеФайла.Записать(ИмяОбработки);
			ОбъектОписанияЗащиты = новый ОписаниеЗащитыОтОпасныхДействий;
			ОбъектОписанияЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяОбработки, Ложь, ОбъектОписанияЗащиты);
			
			КодВыполнения = "Обработка = ВнешняяОбработка;
			|Обработка.Оборудование = СтруктураПараметров.Оборудование;
			|Обработка." + СокрЛП(СтруктураПараметров.НазваниеПроцедуры) + "(""" + СтруктураПараметров.Наименование + """);";
			
		ИначеЕсли ТипЗнч(СтруктураПараметров.РасположениеПроцедуры) = Тип("СправочникСсылка.Действия") Тогда
			КодВыполнения = "МассивДействий = Новый Массив();
			|МассивДействий.Добавить(СтруктураПараметров.РасположениеПроцедуры);
			|Справочники.Действия.ВыполнитьДействия(МассивДействий);"
			
		Иначе  	
			/// можно дописать
		КонецЕсли;

		Попытка	
			Выполнить(КодВыполнения);	
		Исключение
			ОписаниеОшибки = "Сбой при выполнении процесса в фоновом задании = " + СтруктураПараметров.Наименование + ". Описание ошибки: " + ОписаниеОшибки();
			ЗаписьВЖурналОшибок("СерверПривилегированный", "ФоновыйПроцесс", ОписаниеОшибки);		
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры
Функция ПроверкаГруппыУсловий(ГруппаУсловий) Экспорт
	
	МассивВсехПодгрупп = Новый Массив();
	МассивУдовлетворённыхПодгрупп = Новый Массив();
	ИтоговыйРезультат = Истина; // По умолчанию Истина, если не будет противоречащих условий то всё ОК
	Для Каждого СтрокаУсловий Из ГруппаУсловий.Условия Цикл	
		
		Если МассивВсехПодгрупп.Найти(СтрокаУсловий.Подгруппа) = Неопределено Тогда // Подгруппа встречается впервые, добавляем в массив
			МассивВсехПодгрупп.Добавить(СтрокаУсловий.Подгруппа);
		КонецЕсли;					
		Если МассивУдовлетворённыхПодгрупп.Найти(СтрокаУсловий.Подгруппа) <> Неопределено Тогда // Одно из условий подгруппы уже было удовлетворено. Пропускаем проверку 
			Продолжить;	
		Иначе
			Условие = СтрокаУсловий.Условие;
			Результат = ПроверитьУсловие(Условие);
			Если СтрокаУсловий.Обратить Тогда 
				Результат = НЕ Результат;
			КонецЕсли;
			Если СтрокаУсловий.Подгруппа > 0 Тогда 
				Если Результат Тогда
					МассивУдовлетворённыхПодгрупп.Добавить(СтрокаУсловий.Подгруппа);
				КонецЕсли;				
			Иначе
				ИтоговыйРезультат = Результат;
			КонецЕсли;
			Если ИтоговыйРезультат = Ложь Тогда // нет смысла продолжать т.к. одно из обязательных условий не выполнилось 
				Прервать
			КонецЕсли;
		КонецЕсли;				
	КонецЦикла; 
	Если ИтоговыйРезультат Тогда // Проверяем выполнились ли условия всех подгрупп 
		Для Каждого мПодгруппа Из МассивВсехПодгрупп Цикл 
			Если мПодгруппа > 0 Тогда // Проверяем была ли удовлетворена подгруппа, если было неудовлетворено одиночное условие Итоговыйрезультат был бы ЛОЖЬ
				Если МассивУдовлетворённыхПодгрупп.Найти(мПодгруппа) = Неопределено Тогда // Есть невыполненная подгруппа
					ИтоговыйРезультат = Ложь;
				КонецЕсли;		
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
	
	Если ГруппаУсловий.Обратить Тогда 
		ИтоговыйРезультат = НЕ ИтоговыйРезультат;
	КонецЕсли;

	Возврат ИтоговыйРезультат;
	
КонецФункции
Функция ПроверитьУсловие(Условие)
	
	ТекстПолученияПеременных = "";
	МассивЗначенийПеременных = Новый Массив();
	н = -1;
	Для Каждого СтрокаПеременной Из Условие.ПеременныеДляПроцедуры Цикл
		н = н + 1;
		ТекстПолученияПеременных = ТекстПолученияПеременных + СтрокаПеременной.ИмяПеременной + " = "
		+ "МассивЗначенийПеременных[" + н + "];" + Символы.ПС;
		МассивЗначенийПеременных.Добавить(СтрокаПеременной.Значение);		
	КонецЦикла;
	КодПроверкиУсловия = ТекстПолученияПеременных +	Условие.ПрограммныйКодПроверочнойПроцедуры;
	Результат = Ложь;
	Попытка
		Выполнить(КодПроверкиУсловия);
	Исключение
		ОписаниеОшибки = "Сбой при выполнении процедуры проверки условия = " + Строка(Условие) + ". Описание ошибки: " + ОписаниеОшибки();
		ЗаписьВЖурналОшибок("СерверПривилегированный", "ПроверитьУсловие", ОписаниеОшибки);	
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции
Процедура ЗаписатьИнформациюОПроцессе(ИнформацияоФоновомЗадании)
	
	МенеджерЗаписи = РегистрыСведений.Процессы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Наименование = ИнформацияоФоновомЗадании.Наименование;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ДатаНач = ИнформацияоФоновомЗадании.Начало;
	МенеджерЗаписи.ДатаКон = ИнформацияоФоновомЗадании.Конец;
    МенеджерЗаписи.СейчасВыполняется = ИнформацияоФоновомЗадании.Состояние = СостояниеФоновогоЗадания.Активно; 
	МенеджерЗаписи.СостояниеСтрокой = Строка(ИнформацияоФоновомЗадании.Состояние);
	Если ТипЗнч(ИнформацияоФоновомЗадании) = Тип("ФоновоеЗадание") Тогда 
		МенеджерЗаписи.УникальныйИдентификатор = ИнформацияоФоновомЗадании.УникальныйИдентификатор; 
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

//Инициализация
Процедура ДействияВыполняемыеПриЗапускеВыполнитьВсё() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДействияВыполняемыеПриЗапуске.ДействиеГруппа
	               |ИЗ
	               |	РегистрСведений.ДействияВыполняемыеПриЗапуске КАК ДействияВыполняемыеПриЗапуске
	               |ГДЕ
	               |	ДействияВыполняемыеПриЗапуске.Активно";
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДействий = Новый Массив();
	МассивГрупп = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ДействиеГруппа) = Тип("СправочникСсылка.Действия") Тогда 
			МассивДействий.Добавить(Выборка.ДействиеГруппа);	
		ИначеЕсли ТипЗнч(Выборка.ДействиеГруппа) = Тип("СправочникСсылка.ГруппыДействий") Тогда 
			
		КонецЕсли;		
	КонецЦикла;
	
	МассивСПараметрамиДляДействий = Новый Массив();
	МассивСПараметрамиДляДействий.Добавить(МассивДействий);
	ОбщегоНазначения.ВыполнитьПроцедуруФункциюВФонеНаСервере("Справочники.Действия.ВыполнитьДействия", МассивСПараметрамиДляДействий);		
	
КонецПроцедуры

 

